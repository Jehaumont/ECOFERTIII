function initialParameters(savePath)
addpath('D:\STACK_server\PhD\WikiLeeks\WP2\ECOFERTIII\Matlab');
% define the folder where you want to save all the input files

%% check for existence of path
% check if folder exists, if not make a new folder if it exists ask if you
% want to override the input parameters in the existing folder. If you
% don't want to override the files make a new folder with the same name but
% with an extra number appended
isDir = (7==exist(savePath,'dir')); % check if folder exist
isEmpty = size(dir(savePath),1)<=2; % check if folder is empty


if isDir
    if isEmpty
        disp(['Specified folder is still empty, thus the inputfiles are saved in ',...
            savePath])
    else
        overrideFolderFlag = questdlg('The specified folder already exists. Would you like to override the current folder and its inputfiles?', ...
            'Save Folder', ...
            'Yes','No','No');
        switch overrideFolderFlag
            case 'No'
                % find the largest number with the same folder name
                folder_idx = strfind(savePath,'\');
                folder_idx = folder_idx(end-1);
                folderPath = savePath(1:folder_idx); % path where all different folders with inputfiles are stored
                saveFolder = savePath(folder_idx+1:end-1);
                d = dir(folderPath);
                folderNames = {d(3:end).name}; % all the names of the folders containing inputfiles
                folderNumber = 1;
                for name = folderNames
                    matchingFolder = strfind(lower(name{1}),lower(saveFolder));
                    if matchingFolder
                        if strcmpi(name{1},saveFolder)
                            tmp_folderNumber = str2double(name{1}(end));
                        else
                            tmp_folderNumber = str2double(name{1}(length(saveFolder)+1:end));
                        end
                        if ~isempty(tmp_folderNumber)
                            if tmp_folderNumber>=folderNumber 
                                folderNumber = tmp_folderNumber+1;
                            end
                        end
                    end
                end
                savePath = [savePath(1:end-2),num2str(folderNumber),'\'];
                mkdir(savePath)
                disp(['Inputfiles are saved in ', savePath])
            case 'Yes'
                disp(['Inputfiles in ', savePath,' are overwritten'])
        end
    end    
else 
    mkdir(savePath)
    disp(['Folder is made and inputfiles are saved in ',savePath])
end  
%% comments 
%   CO2 level should be added to climate
%   atmospheric pressure should be added as well to climate
%   Cp specific heat of air should be added to cli
%   tstart should be at least 1 day before the first planting date
%% Cauliflower Constant Parameters
% These parameters are related to cauliflower development, but don't change
% during the growth season
clearvars -except savePath
% state all parameters alphabetically {type, value, unit, data type,
% comment}
albedo          =           {"Input",   0.13,      "%",     "numeric", "albedo"};
%alphardens      =           {"Input",   0,          "???",  "numeric"}; UNUSED PARAMETER
crop_type       =           {"Input",   1,         "--",    "numeric", "indicator for which croptype is on the field"};
Ck              =           {"Input",   -0.8,      "--",    "numeric", "Exponential decay factor"};
CritN           =           {"Input",   [5.5,0;...
                                        5.5,0.4;...
                                        5,0.8;...
                                        4,1.2;...
                                        3.5,1.6;...
                                        3,2],       "--",   "numeric", "Critical N concentration based on DVS [g/g DM,DVS]"};
CurdFrac        =           {"Input",   [0,0;...
                                        0,0.15;...
                                        0,0.5;...
                                        0,0.6;...
                                        0,0.8;...
                                        0,1;...
                                        0.05,1.2;...
                                        0.15,1.4;...
                                        0.25,1.6;...
                                        0.35,1.8;...
                                        0.4,2],     "--",   "numeric", "Dry matter fraction distributed to the curd based on DVS [fraction,DVS]"};
CurdNc          =           {"Input",   3.5,        "%DM",  "numeric", "critical nitrogen concentration in the curd"};
DeadLeafFraction=           {"Input",   [0.1,0;...
                                        0.2,5;...
                                        0.3,10;...
                                        0.4,15;...
                                        0.5,20;...
                                        0.6,25;...
                                        0.6,30;...
                                        0.6,35;...
                                        0.6,40],    "--",   "numeric", "percentage of deadleaves related to TeSum [%,TeSum]"};
DVSEffect       =           {"Input",   [1,0;...
                                        1,0.25;...
                                        1,0.5;...
                                        1,0.75;...
                                        1,1;...
                                        0.75,1.25;...
                                        0.3,1.5;...
                                        0.2,1.75;...
                                        0.1,2],     "--",   "numeric", "DVS reduction on photosynthesis efficiency [reduction factor,DVS]"};

%g               =           {"Input",   1           "???"   "numeric"}; UNUSED PARAMETER
Ilsolrad        =           {"Input",   0.49,       "--",       "numeric", "conversion factor of radiation to long wave radiation"};
InitN           =           {"Input",   5.4         "%",        "numeric", "initial nitrogen concentration"};
Issolrad        =           {"Input",   0.47,       "--",       "numeric", "conversion factor of radiation to short wave radiation"};
g               =           {"Input",   1,          "--",       "numeric", "???"};
GREF            =           {"Input",   0.7,        "gDM/gCH20","numeric", "growth efficiency"};
LeafCoverageConversion=     {"Input",   [8.7,0;...
                                        10.9,0.1;...
                                        14.5,0.2;...
                                        19.8,0.3;...
                                        27.3,0.4;...
                                        36.8,0.5;...
                                        46.4,0.6;...
                                        56.6,0.7;...
                                        66.3,0.8;...
                                        72,0.9;...
                                        74.7,1;...
                                        75,1.1;...
                                        75,1.2;...
                                        75,1.3;...
                                        75,1.4;...
                                        75,1.5;...
                                        75,1.6;...
                                        75,1.7;...
                                        75,1.8;...
                                        75,1.9;...
                                        75,2],      "--",   "numeric", "Leaf coverage relative to DVS [Leafcoverage %,DVS]"};
LeafFrac        =           {"Input",   [0.8,0;...
                                        0.8,0.15;...
                                        0.8,0.5;...
                                        0.75,0.6;...
                                        0.7,0.8;...
                                        0.65,1;...
                                        0.5,1.2;...
                                        0.5,1.4;...
                                        0.5,1.6;...
                                        0.5,1.8;...
                                        0.5,2],     "--",   "numeric", "Dry matter fraction distributed to the leaves based on DVS [fraction,DVS]"};
LeafResFrac     =           {"Input",   0.34,       "--",   "numeric", "% of leaves that stay on the field after harvest"};
PARsolrad       =           {"Input",   0.47,       "--",   "numeric", "Photosynthetically active radiation"};
PPFDpar         =           {"Input",   4.57,       "--",   "numeric", "photosynthelical photon flux density factor"};
Q10             =           {"Input",   1.4,        "--",   "numeric", "Respiration increase per 10°C"};
Qe              =           {"Input",   0.0645,     "mgCO2/J","numeric", "PAR utilisation coefficient"};
rd0             =           {"Input",   0.0001,     "cm",   "numeric", "travel distance resistance between bulk soil and root"};
rdens0          =           {"Input",   0.01        "--",   "numeric", "root density in layer i"};
ri              =           {"Input",   200,        "s/m",   "numeric", "bulk surface resistance"}; 
RDPF            =           {"Input",   [0,0,...
                                        0.35,0.48,...
                                        0.55,0.47,...
                                        0.35,0.22,...
                                        0.12,0.07,...
                                        0.04],      "--",   "numeric", "Root density distribution"};
re              =           {"Input",   250,        "s/m",  "numeric", "Aerodynamic resistance"};
rlday           =           {"Input",   72,         "s/m",      "numeric", "bulk stomatal resistance during day"};
rlnight         =           {"Input",   288,        "s/m",      "numeric", "bulk stomatal resistance during night"};
RMRL            =           {"Input",   0.015,      "gCH20/(gDM*day)","numeric", "respiration coefficient leaves"};
RMRF            =           {"Input",   0.01,       "gCH20/(gDM*day)","numeric", "respiration coefficient curd/stem"};
rorad           =           {"Input",   0.02224,    "cm",   "numeric", "mean root radius"};
RootFrac        =           {"Input",   0.09,       "%",    "numeric", "root fraction of total dry matte"};
RootLateralDistance=        {"Input",   0:0.01:40,  "cm",   "numeric", "root lateral distance related to TeSum of RootTeSum"};
RootNc          =           {"Input",   2,          "%DM",  "numeric", "critical nitgren concentration in the root"};
RootTeSum       =           {"Input",   [0,...
                                        56.57,...
                                        173.5,...
                                        406.5,...
                                        900],      "°C day","numeric", "Effective temperature sum for root development"};
rr              =           {"Input",   2,          "cm",   "numeric", "root action radius"};
rs              =           {"Input",   0.2,        "m/s",  "numeric", "surface conductance"};
SLAEffect       =           {"Input",   [175,0;...
                                        150,0.25;...
                                        125,0.5;...
                                        100,0.75;...
                                        100,1;...
                                        100,1.25;...
                                        75,1.5;...
                                        75,1.75;...
                                        75,2],      "--",   "numeric", "SLA conversion to leaf area based on DVS [conversion factor,DVS]"};
SRL             =           {"Input",   10000,      "cm/g", "numeric", "specific root length"};
StemFrac        =           {"Input",   [0.2,0;...
                                        0.2,0.15;...
                                        0.2,0.5;...
                                        0.2,0.6;...
                                        0.15,0.8;...
                                        0.1,1;...
                                        0.1,1.2;...
                                        0.1,1.4;...
                                        0.1,1.6;...
                                        0.1,1.8;...
                                        0.1,2],    "--",    "numeric", "Dry matter fraction distributed to the stem based on DVS [fraction,DVS]"};
TAU             =           {"Input",   [0.0693,...
                                         0.0300],   "m/s",  "numeric", "leaf conductance for CO2 transfer"};
Tb              =           {"Input",   4,          "°C",   "numeric", "base temperature"};
TempEffect      =           {"Input",   [0,-30;...
                                        0,4;...
                                        0.4,8;...
                                        1,12;...
                                        1,15;...
                                        1,21;...
                                        1,30;...
                                        0,45;...
                                        0,50],      "--",   "numeric", "Temperature reduction on photosynthesis efficiency [reduction factor,T]"};

TeSumCurdIni    =           {"Input",   434,        "°C",   "numeric", "effective temperature sum for curd initiation"};
TeSumCurdMat    =           {"Input",   332,        "°C",   "numeric", "effective temperature sum after curd initiation for curd to reach maturity"};
Threshold       =           {"Input",   0.05,       "cm",   "numeric", "threshold for minimal root length"};
virRd           =           {"Input",   [0,0.1,0.2,...
                                        0.3,0.4,...
                                        0.5,0.6,...
                                        0.7,0.8,...
                                        0.9,1],     "--",   "numeric", "relative length (relative to n layers) for root density distribution"};
VPDL            =           {"Input",   3,          "kPa",  "numeric", "vapour pressure defficit limit"};
XKK             =           {"Input",   0.45,       "--",   "numeric", "light extinsion coefficient"};
XM              =           {"Input",   0.091,      "--",   "numeric", "leaf transmission coefficient"};
x_y_param       =           {"Input",   [2.88,...
                                        2.88,...
                                        9.92,...
                                        13.02,...
                                        13.02],     "--",   "numeric", "lateral root distribution "};
z1_param        =           {"Input",   [2.98,...
                                        2.98,...
                                        1.77,...
                                        1.68,...
                                        1.68],      "--",   "numeric", ['gamma distribution parameter',...
                                                                       ' to calculate root density distribution']};
z2_param        =           {"Input",   [1.36,...
                                        1.36,...
                                        5.24,...
                                        7.57,...
                                        7.57],      "--",   "numeric", ['gamma distribution parameter',...
                                                                       ' to calculate root density distribution']};


% convert all variables and save in cauliConsParams.xml
vars = whos;
vars = string({vars.name}');
idx_savePath = strcmp(vars,'savePath');
vars = vars(~idx_savePath,:);
nVars = length(vars);

expression = strcat("cauliConsParams = vertcat(");
for iVars=1:nVars
    if iVars~=nVars
        expression = strcat(expression,vars(iVars),',');
    else
        expression = strcat(expression,vars(iVars),');');
    end
end
eval(expression);
% string array should be converted to cell before merging cells
vars = cellstr(vars);
cauliConsParams = horzcat(vars,cauliConsParams);
params2xml(cauliConsParams,[savePath,'cauliConsParams']);
%% Cauliflower State Parameters
% These parameters define the development of the cauliflower and the values
% of these parameters will change during the growing season 
clearvars -except savePath nComp
% state all parameters alphabetically {type, value, unit, data type,
% comment}
nComp           =           {"Input",   85,         "--",       "numeric", "number of compartiments"};
% nComp is a variable stated in management parameters but is also used in
% this set of parameters check if both values are the same
CumCurdNuptake  =           {"State",   0,          "g/plant",  "numeric", "cumulative curd nitrogen uptake"};
CumEvaporation  =           {"State",   0,          "g/plant",  "numeric", "cumulative evaporation"};
CumLeafNuptake  =           {"State",   0.01512,    "g/plant",  "numeric", "cumulative leaf nitrogen uptake"};
CumLeafStemNuptake=         {"State",   0.02322,     "g/plant",  "numeric", "cumulative leaf and stem nitrogen uptake"};
CumRootNuptake  =           {"State",   0,          "g/plant",  "numeric", "cumulative root nitrgen uptake"};
CumStemNuptake  =           {"State",   0.0081,     "g/plant",  "numeric", "cumultaive stem nitrogen uptake"};
CumShootNuptake =           {"State",   0.02322,    "g/plant",  "numeric", "cumulative shoot nitrogen uptake"};
CumTranspiration=           {"State",   0,          "g/plant",  "numeric", "cumulative transpiration"};
CurdNDemand     =           {"State",   0,          "g/plant",  "numeric", "daily curd nitrogen demand"};
CurdNuptake     =           {"State",   0,          "g/plant",  "numeric", "daily curd nitrogen uptake"};
DAP             =           {"State",   0,          "day",      "numeric", "current date in julian days"};
DMCurd          =           {"State",   0,          "g/plant",  "numeric", "daily curd dry matter production"};
DM_daily        =           {"State",   0,          "g/plant",  "numeric", "daily dry matter production"};
DMLeaf          =           {"State",   0.28,       "g/plant",  "numeric", "daily leaf dry matter production"};
DMShoot         =           {"State",   0.43,       "g/plant",  "numeric", "daily shoot dry matter production"};
DMStem          =           {"State",   0.15,       "g/plant",  "numeric", "daily stem dry matter production"};
DVS             =           {"State",   0.004,      "--",       "numeric", "development stage"};
ERLA            =           {"State",   [[1:nComp{2}]',...
                                        zeros(nComp{2},1)],...
                                                    "cm",       "numeric", "equivalent radius of the root volume with thickness of a soil layer"};
fraction_plant  =           {"State",   0.0282      "--",       "numeric", "fraction of soil area which is covered by plant roots"};
fraction_soil   =           {"State",   0.9718,     "--",       "numeric", "fraction of soil area which is uncovered by plant roots"};
GP              =           {"State",   0,          "g/plant",  "numeric", "daily gross photosynthetical production"};
LAI             =           {"State",   0,          "--",       "numeric", "leaf area index"};
LAICov          =           {"State",   0,          "m^2/m^2",  "numeric", "total leaf area per area covered"};
LeafCoverage    =           {"State",   0,          "g/plant",  "numeric", "percentage ground covered by leaves"};
LeafNDemand     =           {"State",   0,          "g/plant",  "numeric", "daily leaf nitrogen demand to grow to full potential"};
LeafNuptake     =           {"State",   0,          "g/plant",  "numeric", "daily leaf nitrogen uptake"};
LeafStemNDemand =           {"State",   0,          "g/plant",  "numeric", "daily leaf and stem nitrogen demand"};
NFac            =           {"State",   1,          "--",       "numeric", "Reduction of growth potential due to Ndemand is not fulfilled"}; 
Novershoot      =           {"State",   0,          "g/cm³",    "numeric", "Available nitrogen that is not taken up"};
NShootOpt       =           {"State",   0,          "g/plant",  "numeric", "Optimal nitrogen content shoot"};
RCil            =           {"State",   0,          "cm",       "numeric", "enclosing cilinder around roots"};
Rdens           =           {"State",   zeros(nComp{2},1),...
                                                    "--",       "numeric", "root density over all the soil layers"};
RDMLA           =           {"State",   zeros(nComp{2},1),...
                                                    "g/plant",  "numeric", "root dry matter per soil layer"};
RLengthLA       =           {"State",   zeros(nComp{2},1),...
                                                    "cm",       "numeric", "root length per soil layer"};
RLDLA           =           {"State",   zeros(nComp{2},1),...
                                                    "cm/cm^3",  "numeric", "root length denisty per layer"};
RLDRCil         =           {"State",   zeros(nComp{2},1),...
                                                    "cm/cm^3",  "numeric", "root length density distribution in cilinder"};
RMAINT          =           {"State",   0,          "g/plant",  "numeric", "daily plant maintainance respiration"};
RootNDemand     =           {"State",   0,          "g/plant",  "numeric", "daily root nitrogen demand to grow to full potential"};
RootNuptake     =           {"State",   0,          "g/plant",  "numeric", "daily root nitrogen uptake"};
RVolumeLA       =           {"State",   [zeros(nComp{2},1)],...  
                                                    "cm^3",     "numeric", "root volume per soil layer according to big root model"};                                               
ShootNDemand    =           {"State",   0,          "g/plant",  "numeric", "daily plant nitrogen demand to grow to full potential"};
ShootNuptake    =           {"State",   0,          "g/plant",  "numeric", "nitrogen uptake of the whole plant"};
StemNDemand     =           {"State",   0,          "g/plant",  "numeric", "daily stem nitrogen demand to grow to full potential"};
StemNuptake     =           {"State",   0,          "g/plant",  "numeric", "daily stem nitrogen uptake"};
Te              =           {"State",   0,          "°C",       "numeric", "daily effective temperature"};
TeSum           =           {"State",   0,          "°C",       "numeric", "cumulative effective temperature"};
TotDM           =           {"State",   0.43,       "g/plant"   "numeric", "daily total produced biomass"};
TotDMCurd       =           {"State",   0,          "g/plant",  "numeric", "cumulative curd dry matter"};
TotDMDeadLeaf   =           {"State",   0,          "g/plant",  "numeric", "cumulative dead leaf dry matter"};
TotDMGreenLeaf  =           {"State",   0.28,       "g/plant",  "numeric", "cumulative green leaf dry matter"};
TotDMLeaf       =           {"State",   0.28,       "g/plant",  "numeric", "cumulative leaf dry matter"};
TotDMLeafStem   =           {"State",   0.43,       "g/plant",  "numeric", "cumulative leaf and stem dry matter"};
TotDMRoot       =           {"State",   0,          "g/plant",  "numeric", "cumulative root dry matter"};
TotDMShoot      =           {"State",   0.43,       "g/plant",  "numeric", "cumulative shoot dry matter"};
TotDMStem       =           {"State",   0.15,       "g/plant",  "numeric", "cumulative stem dry matter"};
TotLeafArea     =           {"State",   0,          "m^2",      "numeric", "total leaf area"};
TotNDemandCurd  =           {"State",   0,          "g/plant",  "numeric", "cumulative nitrogen demand of the curd"};
TotNDemandLeaf  =           {"State",   0,          "g/plant",  "numeric", "cumulative nitrogen demand of the leaves"};
TotNDemandLeafStem=         {"State",   0,          "g/palnt",  "numeric", "cumulative nitrogen demand of the curd and leves"};
TotNDemandRoot  =           {"State",   0,          "g/plant",  "numeric", "cumulative nitrogen demand of the roots"};
TotNDemandShoot =           {"State",   0,          "g/plant",  "numeric", "cumulative nitrogen demand of the shoot (leaf + stem)"};
TotNDemandStem  =           {"State",   0,          "g/plant",  "numeric", "cumulative nitrogen demand of the stem [g/plant]"};
TotNOptCurd     =           {"State",   0,          "g/plant",  "numeric", "optimal nitrogen content of the curd"};
TotNOptLeaf     =           {"State",   0,          "g/plant",  "numeric", "optimal nitrogen content of the leaves"};         
TotNOptStem     =           {"State",   0,          "g/plant",  "numeric", "optimal nitrogen content of the stem"};
TotNOptLeafStem =           {"State",   0,          "g/plant",  "numeric", "optimal nitrogen content of leaf and stem"};
TotNoptShoot    =           {"State",   0,          "g/plant",  "numeric", "optimal nitrogen content of the plant"};
TotRootDepth    =           {"State",   0,          "cm",       "numeric", "total rooting depth"};

JulianDay       =           {"Logging", [],         "Jday",     "numeric", "Julian day of simulation"};
% convert all variables and save in cauliStateParams.xml
vars = whos;
vars = string({vars.name}');
idx_savePath = strcmp(vars,'savePath');
idx_nComp = strcmp(vars,'nComp');
vars = vars(~(idx_savePath|idx_nComp),:);
nVars = length(vars);

expression = strcat("cauliStateParams = vertcat(");
for iVars=1:nVars
    if iVars~=nVars
        expression = strcat(expression,vars(iVars),',');
    else
        expression = strcat(expression,vars(iVars),');');
    end
end
eval(expression);
% string array should be converted to cell before merging cells
vars = cellstr(vars);
cauliStateParams = horzcat(vars,cauliStateParams);
params2xml(cauliStateParams,[savePath,'cauliStateParams']);
%% Climate constants

clearvars -except savePath nComp
alt             =           {"Input",   14,         "m",        "numeric", "altitude"};
atmp            =           {"Input",   100e+03,   "Pa",       "numeric", "atmosferic pressure"};
CO2L            =           {"Input",   350,        "ppm",      "numeric", "CO2 concentration"};
Cp              =           {"Input",   1000        "J/(kg°C)", "numeric", "specific heat of air"};
karman          =           {"Input",   0.41,       "--",       "numeric", "von Karman constant"};
latitude        =           {"Input",   51.1,       "°",        "numeric", "latitude of field northern hemisphere is + southern hemisphere -"};
longitude       =           {"Input",   355.45,      "°",        "numeric", "longitude of the field position GWM = 0° with degrees counting in clockwise direction"};
sigma           =           {"Input",   2.042e-10   "MJ*T^-4*m^2*h^-1",...
                                                                "numeric", "stefan-boltzmann constant"};
TZLong          =           {"Input",   345,        "°",        "numeric", "longitude of the time zone"};
z_u             =           {"Input",   2,          "m",        "numeric", "height of wind speed measurement"};
z_t             =           {"Input",   2,          "m",        "numeric", "height of temperature and humidity measurements"};

vars = whos;
vars = string({vars.name}');
idx_savePath = strcmp(vars,'savePath');
idx_nComp = strcmp(vars,'nComp');
vars = vars(~(idx_savePath|idx_nComp),:);
nVars = length(vars);

expression = strcat("climateConsParams = vertcat(");
for iVars=1:nVars
    if iVars~=nVars
        expression = strcat(expression,vars(iVars),',');
    else
        expression = strcat(expression,vars(iVars),');');
    end
end
eval(expression);
% string array should be converted to cell before merging cells
vars = cellstr(vars);
climateConsParams = horzcat(vars,climateConsParams);
params2xml(climateConsParams,[savePath,'climateConsParams']);
%% File Settings 
% these parameters define where the output will be stored and were the
% climate data can be found
clearvars -except savePath nComp
% state all parameters alphabetically {type, value, unit, data type,
% comment}
DataLog_size    =           {"Input",       6, "--", "numeric", "integer which represents the size of block to be saved to external storage"};
ResultsPath     =           {"Input",       "D:\STACK_server\PhD\WikiLeeks\WP2\ECOFERT_Sarah\Precision-Agriculture-Ecofert\ECOFERT\ECOFERT_Sarah\Results\",...
                                            "--", "string", "Path to save results"};
ClimatePath     =           {"Input",       "D:\STACK_server\PhD\WikiLeeks\WP2\ECOFERT_Sarah\Precision-Agriculture-Ecofert\ECOFERT\ECOFERT_Sarah\Climate\BIGCLIM19592001TBUp2.txt",...
                                            "--", "string", "Path to find climate data"};
% check the existance of the paths  
if ~exist(ResultsPath{2},'dir')
    mkdir(ResultsPath{2})
    warning(['The specified results path does not exist,',...
             ' the specified folder is now made']);
elseif ~isfile(ClimatePath{2})
    error(['The specified path to the climate date does not exist, please change',...
           ' to existing path were climate data is located']);
end

%convert all parameter to fileSettings.xml                                                                         
vars = whos;
vars = string({vars.name}');
idx_savePath = strcmp(vars,'savePath');
idx_nComp = strcmp(vars,'nComp');
vars = vars(~(idx_savePath|idx_nComp),:);
nVars = length(vars);

expression = strcat("fileSettings = vertcat(");
for iVars=1:nVars
    if iVars~=nVars
        expression = strcat(expression,vars(iVars),',');
    else
        expression = strcat(expression,vars(iVars),');');
    end
end
eval(expression);
% string array should be converted to cell before merging cells
vars = cellstr(vars);
fileSettings = horzcat(vars,fileSettings);
params2xml(fileSettings,[savePath,'fileSettings']);
%% Leek Constant Parameters
% These parameters are related to leek development, but don't change
% during the growth season
clearvars -except savePath nComp
% state all parameters alphabetically {type, value, unit, data type,
% comment}
albedo          =           {"Input",   0.13,       "--",       "numeric", "albedo"};
%alfardens       =           {"Input",   0,          "--", "???????"}; UNUSED PARAMETER
CK              =           {"Input",   -0.8,       "--",       "numeric", "Exponential decay factor"};
crop_type       =           {"Input",   2,          "--",       "numeric", "Indicator for which crop type"};
DVSEffect       =           {"Input",   [1,0;...
                                        1,19.75;...
                                        1,1050.4;...
                                        0.9,1257.8;...
                                        0.5,1440.9;...
                                        0.3,1708;...
                                        0.2,1875.2;...
                                        0.2,2515],  "--",       "numeric", "DVS reduction factor on photosynthetic efficiency [reduction factor, TeSum]"};
g               =           {"Input",   1,          "--",       "numeric", "???"};
GREF            =           {"Input",   0.7,        "--",       "numeric", "Growth effciency"};
Ilsolrad        =           {"Inptu",   0.49,       "--",       "numeric", "????"};
Issolrad        =           {"Input",   0.47,       "--",       "numeric", "????"};
LeafCoverageConversion =    {"input",   [2,0;...
                                        4,19.75;...
                                        8.8,1050.4;...
                                        31.7,1257.8;...
                                        44.2,1440.9;...
                                        53.7,1708;...
                                        63.6,1875.2;...
                                        56.6,2164], "--",       "numeric", "Leaf coverage relative to DVS [Leafcoverage %,TeSum]"};
LeafFrac        =           {"Input",   [0.85,0;...
                                        0.85,19.75;...
                                        0.77,1050.4;...
                                        0.74,1257.8;...
                                        0.72,1440.9;...
                                        0.72,1708;...
                                        0.65,1875.2;...
                                        0.65,2515], "--",       "numeric", "DM distribution to the leaves based on TeSum [fraction, TeSum]"};
LeafNinit       =           {"Input",   4.5,        "--",       "numeric", "Initial leaf nitrogen content"};
PARsolrad       =           {"Input",   0.47,       "--",       "numeric", "Photsynthectically active radiation factor"};
PercNLeaf       =           {"Input",   [4.41,0;...
                                        4.41,19.75;...
                                        3.96,1050.4;...
                                        3.82,1257.8;...
                                        3.5,1440.9;...
                                        3.4,1708;...
                                        3.4,1875.2;...
                                        3.4,2164], "--",        "numeric", "Critical N concentration in leaves base on TeSum [critical N concentration, TeSum]"};
PercNShaft      =           {"Input",   [3.03,0;...
                                        3.03,19.75;...
                                        2.84,1050.4;...
                                        2.5,1257.8;...
                                        2.44,1440.9;...
                                        2.35,1708;...
                                        2.28,1875.2;...
                                        2.28,2164], "--",       "numeric", "Critical N concentration in shaft based on TeSum [cirt N concentration, TeSum]"};
PPFDpar         =           {"Input",   4.57,       "--",       "numeric", "photosynthelical photon flux density factor"};
Q10             =           {"Input",   1.4,        "--",       "numeric", "Respiration increase per 10°C"};
Qe              =           {"Input",   0.0645,     "mgCO2/J",  "numeric", "PAR utilisation coefficient"};
rd0             =           {"Input",   0.0001      "cm",     "numeric", "average distance between bulk soil and root"};
rdens0          =           {"Input",   0.0001      "--",       "numeric", "root density in layer i"};
RDPF            =           {"Input",   [0.00003,...
                                        0.038,...
                                        0.27468,...
                                        0.37509,...
                                        0.21439,...
                                        0.07421,...
                                        0.01916,...
                                        0.00375,...
                                        0.00055,...
                                        0.00013,...
                                        0.00001],   "--",       "numeric", "Root density distribution"};
re              =           {"Input",   250,        "s/m",      "numeric", "Aerodynamic resistance"};
RGRDi           =           {"Input",   [0.0006775542,...
                                        2.3095946463],"mm/°C",  "numeric", "epxonential coefficient for conversion of TeSum to Diameter exp(RGRDi(2)*exp(RGRDi(1)*TeSum)"};
RGRLe           =           {"Input",   [0.0004561056,...
                                        2.0991201269],"cm/°C",  "numeric", "exponential coeeficient for conversion of TeSum to shaft length exp(RGRLe(2)*epx(RGRLe(2)*TeSum)"};
ri              =           {"Input",   200,        "s/m",      "numeric", "bulk surface resistance"};
rlday           =           {"Input",   72,         "s/m",      "numeric", "bulk stomatal resistance during day"};
rlnight         =           {"Input",   288,        "s/m",      "numeric", "bulk stomatal resistance during night"};
RMRL            =           {"Input",   0.015,      "gCH20/(gDM day)","numeric", "Leaf respiration coefficient"};
RMRF            =           {"Input",   0.01,       "gCH20/(gDM day)","numeric", "Shaft respiration coefficient"};
rorad           =           {"Input",   0.02224,    "cm",       "numeric", "mean root radius"};
RootFrac        =           {"Input",   0.09,       "--",       "numeric", "fraction of dry matter assimilated allocated to the roots"}; 
RootTeSum       =           {"Input",   [0,...
                                        555.42,...
                                        1160.25,...
                                        1606.96,...
                                        2200],      "°C *day",  "numeric", "Effective temperature sum for root development"};
rr              =           {"Input",   2,          "cm",       "numeric", "root action radius"};
rs              =           {"Input",   0.2,        "m/s",      "numeric", "surface conductance"};
SLAEffect       =           {"Input",   [100,0;...
                                        100,19.75;...
                                        100,1050.4;...
                                        100,1257.8;...
                                        100,1440.9;...
                                        100,1708;...
                                        100,1875.2;...
                                        100,2515],  "--",       "numeric", "SLA conversion factor to leaf area based on TeSum [conversion factor, TeSum]"};
SRL             =           {"Input",   3000,       "cm/g",     "numeric", "specific root length cm root per gram DM"};
StemFrac        =           {"Input",   [0.15,0;...
                                        0.15,19.75;...
                                        0.23,1050.4;...
                                        0.26,1257.8;...
                                        0.28,1440.9;...
                                        0.28,1708;...
                                        0.35,1875.2;...
                                        0.35,2164], "--",       "numeric", "DM distribution to the stem based on TeSum [fraction, TeSum]"};
StemNinit       =           {"Input",   3.5,        "--",       "numeric", "initial stem nitrogen content"};
TAU             =           {"Input",   [0.026,...
                                        0.03],      "m/s",      "numeric", "Leaf conductance for CO2 transfer"};
Tb              =           {"Input",   2,          "°C",       "numeric", "base temperature"};
TempEffect      =           {"Input",   [0,-30;...
                                        0,4;...
                                        0.4,8;...
                                        1,12;...
                                        1,15;...
                                        1,21;...
                                        1,30;...
                                        0,45;...
                                        0,50],      "--",       "numeric", "Temperature reduction on photosynthic efficiency [reduction factor,T]"};
                                   
virRd           =           {"Input",   [0,...
                                        0.1,...
                                        0.2,...
                                        0.3,...
                                        0.4,...
                                        0.5,...
                                        0.6,...
                                        0.7,...
                                        0.8,...
                                        0.9,...
                                        1],         "--",       "numeric", "relative length (relative to n layers) for root density distribution"};
VPDL            =           {"Input",   3,          "kPa",      "numeric", "vapour pressure deficit limit"};
XKK             =           {"Input",   0.44,       "--",       "numeric", "light extinction coefficient"};
XM              =           {"Input",   0.091,      "--",       "numeric", "Leaf transmission coefficient"};
x_y_param       =           {"Input",  [10,...
                                        31,...
                                        59,...
                                        68,...
                                        68],     "--",       "numeric", "soil coverage by roots"};
z1_param        =           {"Input",   [7.45,...
                                        7.45,...
                                        3.05,...
                                        2.63,...
                                        2.63],      "--",   "numeric", ['gamma distribution parameter',...
                                                                       ' to calculate root density distribution']};
z2_param        =           {"Input",   [0.5,...
                                        1.96,...
                                        4.99,...
                                        5.34,...
                                        5.34],      "--",   "numeric", ['gamma distribution parameter',...
                                                                       ' to calculate root density distribution']};
% convert all variables to table and save in leekConsParams.xml
vars = whos;
vars = string({vars.name}');
idx_savePath = strcmp(vars,'savePath');
idx_nComp = strcmp(vars,'nComp');
vars = vars(~(idx_savePath|idx_nComp),:);
nVars = length(vars);

expression = strcat("leekConsParams = vertcat(");
for iVars=1:nVars
    if iVars~=nVars
        expression = strcat(expression,vars(iVars),',');
    else
        expression = strcat(expression,vars(iVars),');');
    end
end
eval(expression);
% string array should be converted to cell before merging cells
vars = cellstr(vars);
leekConsParams = horzcat(vars,leekConsParams);
params2xml(leekConsParams,[savePath,'leekConsParams']);
%% Leek State Parameters
% These parameters define the development of the cauliflower and the values
% of these parameters will change during the growing season 
clearvars -except savePath nComp
% state all parameters alphabetically {type, value, unit, data type,
% comment} 
CumEvaporation  =           {"State",   0,          "g/plant",  "numeric", "cumulative mass of water that is evaporated"};
CumLeafNuptake  =           {"State",   0.0882,     "g/plant",  "numeric", "cumulative nitrogen uptake of the leaves"};
CumLeafStemNuptake =        {"State",   0.1004,     "g/plant",  "numeric", "cumulative nitrogen uptake of leaves and stem"};
CumRootNuptake  =           {"State",   0,          "g/plant",  "numeric", "cumulative nitrogen uptake of the roots"};
CumShootNuptake =           {"State",   0.1004,     "g/plant",  "numeric", "cumulative nitrgen uptake of the plant"};
CumStemNuptake  =           {"State",   0.0122,     "g/plang",  "numeric", "cumulative nitrogen uptake of the stem"};
CumTranspiration=           {"State",   0,          "g/plant",  "numeric", "cumulative mass of water that is tranpired"};
DAP             =           {"State",   0,          "Day",      "numeric", "days after planting"};
DM_daily        =           {"State",   0,          "g/plant",  "numeric", "daily dry matter production"};
DMLeaf          =           {"State",   1.96,       "g/plant",  "numeric", "daily leaf dry matter production"};
DMStem          =           {"State",   0.35,       "g/plant",  "numeric", "daily stem dry matter production"};
DMShoot         =           {"State",   2.31,       "g/plant",  "numeric", "daily shoot dry matter production"};
fraction_plant  =           {"State",   0,          "--",       "numeric", "percentage of the soil which is covered by plant roots"};
fraction_soil   =           {"State",   1,          "--",       "numeric", "percentage of the soil which is uncovered by plants roots"};
GP              =           {"State",   0,          "g/plant",  "numeric", "daily gross photosynthetic production"};
LAI             =           {"State",   0,          "--",       "numeric", "leaf area index"};
LAICov          =           {"State",   0,          "--",       "numeric", "leaf area index per area covered by leaves"};
LeafCoverage    =           {"State",   0,          "--",       "numeric", "percentage of ground covered by leaves"};
LeafNDemand     =           {"State",   0,          "g/plant",  "numeric", "daily leaf nitrogen demand to grow to the full potential"};
LeafNuptake     =           {"State",   0,          "g/plant",  "numeric", "daily leaf nitrogen uptake"};
LeafStemNDemand =           {"State",   0,          "g/plang",  "numeric", "daily leaf and stem nitrogen demand"};
MeanDayTemp     =           {"State",   0,          "g/plant",  "numeric", "daily mean temperature"};
NFac            =           {"State",   1,          "--",       "numeric", "nitrogen correction factor for  photosynthesis"};
Novershoot      =           {"State",   0,          "--",       "numeric", "daily nitrogen overshoot"};
RCil            =           {"State",   0,          "cm",       "numeric", "enclosing cilinder around roots"};
Rdens           =           {"State",   zeros(nComp{2},1),...
                                                    "--",       "numeric", "root density over all the soil layers"};
RDMLA           =           {"State",   zeros(nComp{2},1),...
                                                    "g/plant",  "numeric", "root dry matter per soil layer"};
RLengthLA       =           {"State",   zeros(nComp{2},1),...
                                                    "cm",       "numeric", "root length per soil layer"};
RLDLA           =           {"State",   zeros(nComp{2},1),...
                                                    "cm/cm^3",  "numeric", "root length denisty per layer"};
RLDRCil         =           {"State",   zeros(nComp{2},1),...
                                                    "cm/cm^3",  "numeric", "root length density distribution in cilinder"};
RMAINT          =           {"State",   0,          "g/plang",  "numeric", "daily maintenace repsiration"};
RootNDemand     =           {"State",   0,          "g/plang",  "numeric", "daily root nitrogen demand to grow to full potential"};
RootNuptake     =           {"State",   0,          "g/plant",  "numeric", "dialy root nitrogen uptake"};
ShaftDi         =           {"State",   0,          "cm",       "numeric", "shaft diameter"};
ShaftLe         =           {"State",   0,          "cm",       "numeric", "shaft length"};
ShootNDemand    =           {"State",   0,          "g/plant",  "numeric", "daily shoot nitrogen demand"};
ShootNuptake    =           {"State",   0,          "g/plant",  "numeric", "daily shoot nitrogen uptake"};
StemNDemand     =           {"State",   0,          "g/plant",  "numeric", "daily stem nitrogen demand to grow to full potential"};
StemNuptake     =           {"State",   0,          "g/plant",  "numeric", "daily leaf nitrogen uptake"};
Te              =           {"State",   0,          "°C",       "numeric", "daily effective temperature (mean day temp - base tempearture)"};
TeSum           =           {"State",   0,          "°C",       "numeric", "cumulative effective temperature"};
TotDM           =           {"State",   2.31,       "g/plant",  "numeric", "total daily dry matter production"};
TotDMLeaf       =           {"State",   1.96,       "g/plant",  "numeric", "cumulative dry matter of leaves"};
TotDMLeafStem   =           {"State",   2.31        "g/plant",  "numeric", "cumulative dry matter of leaf and stem"};
TotDMShoot      =           {"State",   2.31,       "g/plant",  "numeric", "cumulative plant dry matter"};
TotDMStem       =           {"State",   0.35,       "g/plant",  "numeric", "cumulative dry matter of stem"};
TotDMRoot       =           {"State",   0,          "g/plant",  "numeric", "cumulative dry matter of roots"};
TotLeafArea     =           {"State",   0,          "m^2",      "numeric", "cumulative leaf area"};
TotNDemandLeaf  =           {"State",   0,          "g/plant",  "numeric", "cumulative nitrogen demand of the leaves"};
TotNDemandShoot =           {"State",   0,          "g/plant",  "numeric", "cumulative nitrogen demand of the whole plant"};
TotNDemandRoot  =           {"State",   0,          "g/plant",  "numeric", "cumulative nitrogen demand of the roots"};
TotNDemandStem  =           {"State",   0,          "g/plant",  "numeric", "cumulative nitrogen demand of the stem"};
TotNOptLeaf     =           {"State",   0,          "g/plant",  "numeric", "cumulative N mass per leaf"};
TotNOptStem     =           {"State",   0,          "g/plant",  "numeric", "cumulative N mass per stem"};
TotNOptLeafStem =           {"State",   0,          "g/plant",  "numeric", "cumulative N mass per leaf and stem"};
TotRootDepth    =           {"State",   0,          "cm",       "numeric", "cumulative rooting depth"};

JulianDay       =           {"Logging", [],         "Jday",     "numeric", "Julian day of simulation"};


% convert all variables and save in leekStateParams.txt
vars = whos;
vars = string({vars.name}');
idx_savePath = strcmp(vars,'savePath');
idx_nComp = strcmp(vars,'nComp');
vars = vars(~(idx_savePath|idx_nComp),:);
nVars = length(vars);

expression = strcat("leekStateParams = vertcat(");
for iVars=1:nVars
    if iVars~=nVars
        expression = strcat(expression,vars(iVars),',');
    else
        expression = strcat(expression,vars(iVars),');');
    end
end
eval(expression);
% string array should be converted to cell before merging cells
vars = cellstr(vars);
leekStateParams = horzcat(vars,leekStateParams);
params2xml(leekStateParams,[savePath,'leekStateParams']);
%% Management Parameters
% These parameters define which farm management practices will be applied
% during the growing season 
clearvars -except savePath nComp
% state all parameters alphabetically {type, value, unit, data type,
% comment}
croptype        =           {"Input",   repmat(["Cauli","Leek"],1,43),...
                                                    "--",       "string", "vector with the crop rotation 1 = cauliflower, 2 = leek"};
fertDecisionRule=           {"Input",   "FIX3",     "DL",       "string",  "determines which decision rule is used to calculate the target values for fertilization"};
fertMomentCauli =           {"Input",   [0,49],     "Day",      "numeric", "day for applying fertilizer days after planting cauliflowar [fertMoment1, fertMoment2,...,fertMomentN]"};
fertMomentLeek  =           {"Input",   35,         "Day",      "numeric", "day for applying fertilizer days after planting leek [fertMoment1, fertMoment2, ..., fertMomentN]"};
fertStrategy    =           {"Input",   "Broad",    "DL",       "string",  "method to apply fertilizer 'Broad', 'Fert', 'Row'"};
hDateCauli      =           {"Input",   160,        "DAJ",      "numeric", "harvest date of cualiflower (DAJ is days after 01/01/start year)"};
hDateLeek       =           {"Input",   308,        "DAJ",      "numeric", "harvest date of cualiflower (DAJ is days after 01/01/start year)"};
irri            =           {"State",   0,          "cm",       "numeric", "amount of water irrigated"};
KNS_miner_corr  =           {"Input",   0.8,        "kg/day",   "numeric", "estimated daily mineralisation"};
nsol            =           {"Input",   3,          "--",       "numeric", "number of solutes as inorganic fertilizer"};
pDateCauli      =           {"Input",   61,         "DAJ",      "numeric", "plant date of cauliflower"};
pDateLeek       =           {"Input",   175,        "DAJ",      "numeric", "plant date of leek"};
PLM2Cauli       =           {"Input",   2.75,       "m^-2",     "numeric", "plantdenisty cauliflower"};
PLM2Leek        =           {"Input",   15.56,      "m^-2",     "numeric", "plantdensity leek"};
ponsDepthLeek   =           {"Input",   15,         "cm",       "numeric", "pons depth of leek seedlings"};
ppdepth         =           {"Input",   [0 0;...
                                        10 0],      "cm",       "numeric", "plowing depht"};                                   

% calculate the days for applying fertilizer
fertMomentCauli{2} = repmat(pDateCauli{2},1,size(fertMomentCauli{2},2)) +...
                     repmat(fertMomentCauli{2},length(pDateCauli{2}),1);
fertMomentLeek{2} = repmat(pDateLeek{2},1,size(fertMomentLeek{2},2)) +...
                    repmat(fertMomentLeek{2},length(pDateLeek{2}),1);

% convert all variables and save in managementParams.txt
vars = whos;
vars = string({vars.name}');
idx_savePath = strcmp(vars,'savePath');
idx_nComp = strcmp(vars,'nComp');
vars = vars(~(idx_savePath|idx_nComp),:);
nVars = length(vars);

expression = strcat("managementParams = vertcat(");
for iVars=1:nVars
    if iVars~=nVars
        expression = strcat(expression,vars(iVars),',');
    else
        expression = strcat(expression,vars(iVars),');');
    end
end
eval(expression);
% string array should be converted to cell before merging cells
vars = cellstr(vars);
managementParams = horzcat(vars,managementParams);
params2xml(managementParams,[savePath,'managementParams']); 
%% Simulation Settings
% These parameters are settings that the define the resolution (spatial and
% temporal) of the simulation model. They also define the length of the
% simulation
clearvars -except savePath nComp nsol
nCompCropSettings = nComp;
% state all parameters alphabetically {type, value, unit, data type,
% comment}

nComp           =           {"Input",       85,     "--",   "numeric", "number of soil layers"};
calcAddFertFlag =           {"Input",       1,      "--",   "boolean", "boolean to turn on/off automatic calculation of amount of fertilizer "};
calibrateFlag    =          {"Input",       1,      "--",   "boolean", "boolean to turn on/off calibration data for 2009-2011"};
columnDepth     =           {"Input",       85,     "cm",   "numeric", "max depth for soil simulations"};
dt_max          =           {"Input",       0.5,    "day",  "numeric", "largest time step in wave"};
dt_min          =           {"Input",       0.000001,"day", "numeric", "smallest time step in wave"};
dt_start        =           {"Input",       0.0001  "day",  "numeric", "starting time step in wave"};
dx              =           {"Calc",        columnDepth{2}/...
                                            nComp{2},...
                                                    "cm",   "numeric", "soil layer thickness"}; 
dxInter         =           {"Calc",        [dx{2}/2,...
                                            repmat(dx{2},1,nComp{2}-1),...
                                            dx{2}/2],...
                                                    "cm",   "numeric", "inter node distance"};
errTol          =           {"Input",       0.0001, "--",   "numeric", "error tolerance for numeric solution of differential equations"};
endDay          =           {"Input",       31,      "--",   "numeric", "last day of the simulation"};
endMonth        =           {"Input",       12,      "--",   "numeric", "last month of the simulation"};
endYear         =           {"Input",       2009,   "--",   "numeric", "last year of the simulation"};

immobile        =           {"Input",       0,      "--",   "boolean", "choice for immobile water concept"};
maxIter         =           {"Input",       1000,   "--",   "numeric", ['maximum iterations for numerical solution',... 
                                                                       ' of differential equaitons in WAVE']};
Nfast           =           {"Input",       24,     "/day", "numeric", "iterations in the fast loop per day"};
Nslow           =           {"Input",       1,      "/day", "numeric", "iterations in the slow loop per day"}; 
PTFWeynants     =           {"Input"        1,      "--",   "boolean", ['boolean to turn on/off the use of weynants',...
                                                                       ' pedotransfer functions for the calculation of the hyadraulic parameters']};
simNitroFlag    =           {"Input",       1,      "--",   "boolean", "boolean to turn on/off nitrogen processes"};
simPlantFlag    =           {"Input",       1,      "--",   "boolean", "boolean to turn on/off plant processes"};
simPlant1Flag   =           {"Input",       0,      "--",   "boolean", "boolean to turn on/off plant processes in the outer cilinder of the quasi 2D wave model (0 if fertstartegy = 'row' or 'fert', otherwise = simPlant"};
simPlant2Flag   =           {"Calc",        simPlantFlag{2},...
                                                    "--",   "boolean", "boolean to turn on/off plant processes in the inner cilinder of the quasi 2D wave model"};
simSolFlag      =           {"Input",       1,      "--",   "boolean", "boolean to turn on/off soil simulation"};
simTempFlag     =           {"Input",       1,      "--",   "boolean", "boolean to turn on/off soil temperature"};
solve_flow_time =           {"State",       0,      "--",   "numeric", "computation time to solve flow equation"};
startDay        =           {"Input",       1,      "--",   "numeric", "first day of the simulation"};
startMonth      =           {"Input",       1,      "--",   "numeric", "first month of the simulation"};
startYear       =           {"Input",       2009,   "--",   "numeric", "first year of the simulation"};
tmax            =           {"Calc",        datenum(endYear{2},...
                                                    endMonth{2},...
                                                    endDay{2}),...
                                                    "Jday", "numeric", "julian day for the end of the simulation"};
tstart          =           {"Calc",        datenum(startYear{2},...
                                                   startMonth{2},...
                                                   startDay{2}),...
                                                   "Jday",  "numeric", "julian day for the start of the simulation"};
t               =           tstart;                                               
units           =           {"Input",   ["cm",...
                                         "day",...
                                         "g",...
                                         "°C"],     "--",   "cell",     "define units in which the variables in the wave model are stated"};
print_time      =           {"Calc",    [1 tmax{2}],"day",  "numeric",  "define the time window of the simulation"};                                     
print_node      =           {"Calc",    1:nComp{2}, "--",   "numeric",  "indicate each soil layer with a number"};
% calculate start and end date as DD-MMM-YYYY
endDate = {"Calc",string(datetime(endYear{2},endMonth{2},endDay{2})),"dd-mmm-yyyy", "string", "last day of the simulation"};
startDate = {"Calc",string(datetime(startYear{2},startMonth{2},startDay{2})),"dd-mmm-yyyy", "string", "first day of the simulation"};
clearvars endYear endMondth endDay startYear startMonth startDay %clear those variables to have proper stored variables for the dates

% check if the same nComp number is used for the crop parameters and
% simulation settings
if nComp{2}~=nCompCropSettings{2}
    error('Number of compartiments is not systematically used across the generation of the inputfiles')
else
    clear nCompCropSettings
end

% convert all variables to table and save in simulationSettings.xml
vars = whos;
vars = string({vars.name}');
% variables mentioned here should be transffered to the next section but
% can't be in the inputfile
idx_savePath = strcmp(vars,'savePath');
idx_nSol =  strcmp(vars,'nsol');
vars = vars(~(idx_savePath|idx_nSol),:);
nVars = length(vars);

expression = strcat("simulationSettings = vertcat(");
for iVars=1:nVars
    if iVars~=nVars
        expression = strcat(expression,vars(iVars),',');
    else
        expression = strcat(expression,vars(iVars),');');
    end
end
eval(expression);
% string array should be converted to cell before merging cells
vars = cellstr(vars);
simulationSettings = horzcat(vars,simulationSettings);
params2xml(simulationSettings,[savePath,'simulationSettings']);
%% Soil Constant Parameters
% All state parameters are divided over the inner or outer cilinder for the
% quasi-2D approach to the wave soil simulation model
clearvars -except savePath nComp nsol tstart
% state all parameters alphabetically {type, value, unit, data type,
% comment}
%%%%%%%% TEXTURE PARAMETERS   %%%%%%%%
bulkDensity     =           {"Measurement", repmat(1.5,...
                                            nComp{2},1),...
                                                    "%",    "numeric", "soil bulk density"};
percClay        =           {"Measurement", 0.06,   "%",    "numeric", "percentage clay in the soil"};
percSand        =           {"Measurement", 0.82,   "%",    "numeric", "percentage sand in the soil"};
percSilt        =           {"Measurement", 0.12,   "%",    "numeric", "percentage silt in the soil"};


%%%%%%%% NITROGEN FATE MODULE %%%%%%%%
fe              =           {"Input",       0.6,    "%",   "numeric", "turnover efficiency of organic matter"};
fh              =           {"Input",       0.5,   "%",   "numeric", "humification constant"};
kdenit          =           {"Input",       repmat(0.04,...
                                            nComp{2},1),...
                                                    "day^-1","numeric", "denitrification rate constant"};
khum            =           {"Input",       repmat(0.002,...
                                            nComp{2},1),...
                                                    "day^-1","numeric", "humus degradation rate constant"};
khydro          =           {"Input",       repmat(0,...
                                            nComp{2},1),...
                                                    "day^-1","numeric", "ureum hydrolysis rate constant"};
klit            =           {"Input",       repmat(0.05,...
                                            nComp{2},1),...
                                                    "day^-1","numeric", "litter degradation rate constant"};
kman            =           {"Input",       repmat(0.05,...
                                            nComp{2},1),...
                                                    "day^-1","numeric", "manure degradation rate constant"};
knitrif         =           {"Input",       repmat(0.05,...
                                            nComp{2},1),...
                                                    "day^-1","numeric", "nitrification rate constant"};
kvolat          =           {"Input",       repmat(0,...
                                            nComp{2},1),...
                                                    "day^-1","numeric", "volatilization rate constant"};
r0              =           {"Input",       20,     "--",   "numeric", "C/N ratio biomass"};

%%%%%%%% SOLUTE TRANSPORT MODULE %%%%%%
alf             =           {"Input",       repmat(0,...
                                            nComp{2},1),....
                                                    "day^-1","numeric", "empirical transfer coefficient"};
ar              =           {"Input",       repmat(0.005,...
                                            nComp{2},3),...
                                                    "--",   "numeric",  "empirical constant to calculate the effective diffusion coefficient"};
br              =           {"Input",       repmat(10,...
                                            nComp{2},3),...
                                                    "--",   "numeric", "empirical constant to calculate the effective diffusion coefficient"};
conc            =           {"Input",       [0 0 0],"g/cm²","numeric", "concentration of initial solute concentration"};
ddepsol         =           {"State",   zeros(1,nsol{2}),...
                                                    "g/cm²",    "numeric",  'daily dry deposition of solutes'};
dif             =           {"Input",       repmat([0,1.64,1.64],...
                                            nComp{2},3),...
                                                    "cm^2/day","numeric", "chemical diffusion coefficient"};
f               =           {"Input",       repmat(0,...
                                            nComp{2},1),...
                                                    "%",   "numeric", "fraction of adsorption sites"};
kd              =           {"Input",       repmat([0, 0.001, 0],...
                                            nComp{2},1),...
                                                    "m^3/kg","numeric", "solute distribution constant"};
lm              =           {"Input",       repmat(50,...
                                            nComp{2},1),...
                                                    "cm",   "numeric",  "soil solute dispersivity"};
ratio           =           {"Input",       repmat(1,...
                                            nComp{2},1),...
                                                    "--",   "numeric", "mobile volumetric water content/total volumetric water content"};
rates           =           {"Input",       repmat(0,...
                                            nComp{2},3),...
                                                    "--",   "numeric", "???????"};                                                
rcsolo          =           {"Input",       [0, 1e-05/3, 1e-05/3],...
                                                    "g/cm²","numeric", ['residual solute concentration below',...
                                                                        ' which no active/passive uptake is possible']};
solboco_input_type=         {"Input",       2,      "--",   "numeric", "indicator to choose boundary condition type"};
solboco_top_type=           {"Input",       2,      "--",   "numeric", "indicator to choose boundary condition type"};
solute_applic   =           {"Input",       [0 0 0 0;...
                                            1 0 0 0;...
                                            2 0 0 0],"--",  "numeric",  "solute application [t ureum amonium nitrate]"};       
tcsolo_ini      =           {"State",       repmat([0,1,1],...
                                            nComp{2},1).*[repmat(0.767e-05,30,1);...
                                            repmat(0.167e-05,30,1);repmat(0.2e-05,...
                                            25,1)],...
                                                     "g/cm²", "numeric", ['initial solute concentration in',...
                                                                        ' the soil profile in the outer cilinder']};%repmat([0,1,1],...
%                                         nComp{2},1).*[repmat(0.767e-05,30,1);...
%                                         repmat(0.167e-05,30,1);repmat(0.2e-05,...
%                                         25,1)]
wdepsol         =           {"State",   zeros(1,nsol{2}),...
                                                    "g/cm²",    "numeric",  'daily wet deposition of solutes'};                                                                    
%%%%%%%% WATER TRANSPORT MODULE %%%%%%%%
alfa            =           {"Input",       repmat(0.01,...
                                            nComp{2},1),...
                                                    "cm^-1","numeric", "inverse air entry value"};
alfa_r          =           {"Input",       repmat(1,...
                                            nComp{2},1),...
                                                    "--",   "numeric",  "hysteris parameter of moisture retetion curve"};
arer            =           {"Input",       0.04,   "day^-1","numeric", "intercept of relationship between maximal uptake and depth"}; 
brer            =           {"Input",       6.6667e-04,"day^-1*cm^-1",  "numeric", "slope of the linear relationship between uptake and rootdepth"};                                            
epa_high        =           {"Input",       0.5,    "--",   "numeric",  "threshold for high evaporative demand"};
epa_low         =           {"Input",       0.1,    "--",   "numeric",  "threshold for low evaporative demand"};
irri            =           {"Input",       [0 0],  "--",   "numeric",  "??????"};
irrifile        =           {"Input",       [0 0],  "--",   "numeric",  "??????"};
isLinr          =           {"Input",       1,      "--",   "boolean",  ['indicator 1: linear relationship',...
                                                                        ' between reduciton factor and water uptake']};
ks              =           {"Input",       [repmat(45,85,1)],...
                                                    "cm/day","numeric", "saturated hydraulic conductivity"};%[repmat(45,40,1); repmat(5,45,1)]
lambda          =           {"Input",       repmat(-1.86,...
                                            nComp{2},1),...
                                                    "--",    "numeric", "van Genuchten Mualem parameter"};
N               =           {"Input",       [repmat(1.32,30,1);...
                                            linspace(1.3355,1.18,10)';...
                                            repmat(1.18,45,1)],...
                                                    "--",   "numeric",  ['van Genuchten model shape',...
                                                                        'parameter 1.28 for 0-30cm 1.18 for 30-90cm']};
ph0             =           {"Input",       -20,    "cm",   "numeric",  ['pressure head below',...
                                                                        ' which extraction starts higher is anaerobic']};
ph1             =           {"Input",       -40,    "cm",   "numeric",  ['pressure head from which',...
                                                                        'optimal extraction is possible']};
ph2l            =           {"Input",       -400,   "cm",   "numeric",  ['pressure head at which no',...
                                                                        ' longer optimal extraction',...
                                                                        ' is possible when evaporative demand is high']};
ph2h            =           {"Input",       -600,   "cm",   "numeric",  ['pressure head at which no',...
                                                                        ' longer optimal extraction is',...
                                                                        ' possible when evaporative demand is low']};
ph3             =           {"Input",       -16000,  "cm",   "numeric",  "pressure head below which no extraction is possible"};
wat_bottom_BC_type=         {"Input",       [4 0],  "--",   "numeric",  "type for bottom boundary conditions in water flow"};
wcr             =           {"Input",       repmat(0.03,...
                                            nComp{2},1),...
                                                    "--",   "numeric",  "soil residual volumetric water content"};
wcs             =           {"Input",       [repmat(0.396,...
                                            35,1);repmat(0.45,50,1)],...
                                                    "--",   "numeric",  "soil saturated volumetric water content"};

%%%%%%%% HEAT TRANSPORT MODULE %%%%%%
temp_BC          =           {"Input",       [2 NaN,...
                                             2 NaN],"--",   "numeric",  "integer indicator for choosing the type of boundary condition"};
%%%%%%%% INITIAL STATE %%%%%%
soil_om         =           {"Input",       ones(nComp{2},7).*...
                                            repmat([1e-07,1.25e-08,1e-07,...
                                            1.25e-08,1e-03,1.25e-04,0],...
                                            nComp{2},1),    "g/cm²",...
                                                            "numeric",  ['soil organic matter in inner cilinder',...
                                                                        '[Carbon in manure, nitrogen in manure,',...
                                                                        'carbon in litter, nitrogen in litter,',...
                                                                        'carbon in hummus, nitrogen in hummus']};
                                    
%%%%%%%% NUMERICAL COMPUTATION PARAMETRS %%%%%%%
tolerance       =           {"Input",   0.15,       "--",  "numeric",   ['tolerance on state difference',...
                                                                        'for detection of drying or wetting']}; 


% change soil organic matter in 40-60cm soil layer and 60-85cm soil layer
soil_om{2}(40:60,5:6) = soil_om{2}(40:60,5:6)/10;
soil_om{2}(61:85,5:6) = soil_om{2}(61:85,5:6)/100;

% convert all variables to table and save in soilConsParams.xml
vars = whos;
vars = string({vars.name}');
idx_savePath = strcmp(vars,'savePath');
idx_nComp = strcmp(vars,'nComp');
idx_tstart = strcmp(vars,'tstart');
vars = vars(~(idx_savePath|idx_nComp|idx_tstart),:);
nVars = length(vars);

expression = strcat("soilConsParams = vertcat(");
for iVars=1:nVars
    if iVars~=nVars
        expression = strcat(expression,vars(iVars),',');
    else
        expression = strcat(expression,vars(iVars),');');
    end
end
eval(expression);
% string array should be converted to cell before merging cells
vars = cellstr(vars);
soilConsParams = horzcat(vars,soilConsParams);
params2xml(soilConsParams,[savePath,'soilConsParams']);
%% Soil State parameters rooted zone
% All state parameters for the inner cilinder of the
% quasi-2D approach to the wave soil simulation model. Inner cilinder is
% the cilinder in which plant roots are present. Outer cilinder is rootless
% soil 
clearvars -except savePath nComp nsol tstart
% state all parameters alphabetically {type, value, unit, data type,
% comment}

%%%%%%%% SOLUTE PARAMETERS %%%%%%%%
acsolio         =           {"State",   [],     "g/kg",     "numeric",  ['absorbed solute',...
                                                                        ' concentration in the immobile',...
                                                                        ' zone for the acutal time',...
                                                                        ' step for each compartment',...
                                                                        ' and each solute species']};
acsolmo         =           {"State",   [],     "g/kg",     "numeric",  ['absorbed solute concentration',...
                                                                        ' in the mobile zone for the actual',...
                                                                        ' time step for each compartiment and',...
                                                                        ' each solute species']}; 
applic_boolean 	=           {"State",   0,      "--",       "boolean",  "?????"};
bc              =           {"State",   zeros(1,10),...
                                                "--",       "numeric",  "?????"};
carblit         =           {"State",   0,      "g/cm²",    "numeric",  'carbon in litter pool'};
carbman         =           {"State",   0,      "g/cm²",    "numeric",  'carbon in manure pool'};
cco2o           =           {"State",   0,      "g",        "numeric",  'concentration co2 released'};       
cden            =           {"State",   zeros(nComp{2}-1,1),"g/cm²",...
                                                            "numeric",  'cumulative denitrification in each soil layer'};
chyd            =           {"State",   zeros(nComp{2}-1,1),"g/cm²",...
                                                            "numeric",  'cumulative hydrolysis in each soil layer'};
cim             =           {"State",   []      "g/cm²",    "numeric",  'solute immobile concentration'};
cm              =           {"State",   [],     "g/cm²",    "numeric",  'solute mobile concentration'};
UreumConc_log   =           {"Logging",   zeros(nComp{2},1),...
                                                "g/cm²",      "numeric", ['Datalogging variable for ureum content in',...
                                                                        ' each soil layer [g/cm²]']};
NH4Conc_log     =           {"Logging",   zeros(nComp{2},1),...
                                                "g/cm²",      "numeric", ['Datalogging variable for NH4 content in',...
                                                                        ' each soil layer [g/cm²]']};
NO3Conc_log     =           {"Logging",   zeros(nComp{2},1),...
                                                "g/cm²",       "numeric", ['Datalogging variable for nitrate content in',...
                                                                        ' each soil layer [g/cm²]']};                                                                    
cmin            =           {"State",   zeros(nComp{2},nsol{2}),...
                                                "g/cm²",    "numeric",  ['cumulative mineralisation of nitrogen',...
                                                                        ' in each soil layer']};
cnit            =           {"State",   zeros(nComp{2}-1,1),"g/cm²",...
                                                            "numeric",  'cumulative nitrification in each soil layer'};
conirsol        =           {"State",   [zeros(1,nsol{2}+1);...
                                         [65,zeros(1,nsol{2})]],...
                                                "g/cm²",    "numeric",  'fertigation concentrations [t ureum ammonium nitrate]'};
csol            =           {"State",   [],     "g/cm²",    "numeric",  'total solute concetentration'};
csolmo          =           {"State",   [],     "g/kg",     "numeric",  ['solute concentration in the mobile zone',...
                                                                        ' for the actual time step for',...
                                                                        ' each compartiment and each solute species']};
cs              =           {"State",   zeros(3,1), "g/cm²", "numeric", "initial solute reservoir zeros(nsol,1)"}; 
cum_nit_sink	=           {"State",   [],     "g/cm²",    "numeric",  'cumulative nitrogen sink'};
cupt            =           {"State",   zeros(nComp{2},nsol{2}),...
                                                "g/cm²",    "numeric",  'profile total carbon utpake'};
cvol            =           {"State",   zeros(nComp{2}-1,1),"g/cm²",...
                                                            "numeric",  'cumulative volatilisation in each soil layer'};
deccorg         =           {"State",   0,      "g/cm²",    "numeric",  'organic carbon sink for each compartiment'};
decnorg         =           {"State",   0,      "g/cm²",    "numeric",  'organic nitrogen sink for each compartiment'};
deniti          =           {"State",   [],     "g/cm²",    "numeric",  ['denitrification in each compartiment',...
                                                                        ' for immobile region']};
denitm          =           {"State",   [],     "g/cm²",    "numeric",  ['denitrificationo in each compartiment',...
                                                                        ' for the mobile region']};
diffus          =           {"State",   [],     "g/(L*day)","numeric",  ['effective diffusion coefficient',...
                                                                        ' corrected for numerical dispersion']};
DN              =           {"State",   [],     "g/cm²",    "numeric",  'daily soil denitrification in soil mobile region'};             
extra_sol       =           {"State",   [],     "g/cm²",    "numeric",  'extra solutes added during current time step'};
fsol            =           {"State",   [tstart{2}, zeros(1,nsol{2})],...
                                                "g/cm²",    "numeric",  'fertilizer application [t ureum ammonium nitrate]'};
hydro_ureai 	=           {"State",   [],     "g/cm²",    "numeric",  'ureum hydrolysis in the immobile region'}; 
hydro_uream 	=           {"State",   [],     "g/cm²",    "numeric",  'ureum hydrolysis in the immobile region'};
mineri          =           {"State",   [],     "g/l/day",  "numeric", ['mineralisation of organic',...
                                                                        ' nitrogen in the immmobile soil region',...
                                                                        ' for each compartiment']};
minerm          =           {"State",   [],     "g/l/day",  "numeric", ['mineralisation of organic',...
                                                                        ' nitrogen in the mobile soil region',...
                                                                        ' for each compartiment']};	 
N_reaction_balance 	=       {"State",   zeros(11,1),...
                                                "???",      "numeric",  ['Reaction balances from all',...
                                                                        ' nitrogen sources']};
N               =           {"State",   [],     "g/cm²",    "numeric",  'daily soil nitrification in soil mobile region'};% DN2
nitrifi         =           {"State",   [],     "g/l/day",  "numeric",  ['nitrification in each compartiment',...
                                                                        ' in the immobile soi region']};
nitrifm         =           {"State",   [],     "g/l/day",  "numeric",  ['nitrification in each compartiment',...
                                                                        ' in the mobile soil region']};		 
om_appl         =           {"Input",   [0,0,0],"g/cm²",    "numeric", "amount of organic matter applied at harvest date in the inner cilinder of quasi 2D WAVE"};                                    
om_balance      =           {"State",   [],     "g/cm²",    "numeric",  'organic matter contents in each OM pool'};
CarbMan_log     =           {"Logging", zeros(nComp{2},1),...
                                                "g/cm²",    "numeric",  'Carbon in manure content'};
NitMan_log      =           {"Logging", zeros(nComp{2},1),...
                                                "g/cm²",    "numeric",  'Nitrogen in manure content'};
CarbLit_log     =           {"Logging", zeros(nComp{2},1),...
                                                "g/cm²",    "numeric",  'Carbon in litter content'};
NitLit_log      =           {"Logging", zeros(nComp{2},1),...
                                                "g/cm²",    "numeric",  'Nitrogen in litter content'};
CarbHum_log     =           {"Logging", zeros(nComp{2},1),...
                                                "g/cm²",    "numeric",  'Carbon in hummus content'};
NitHum_log      =           {"Logging", zeros(nComp{2},1),...
                                                "g/cm²",    "numeric",  'Nitrogen in hummus content'};
CO2vol_log      =           {"Logging", zeros(nComp{2},1),...
                                                "g/cm²",    "numeric",  'Volatised CO2 from soil'};
reservoir       =           {"State",   0,      "g/cm²",    "numeric",  ['fictous reservoir of inorganic',...
                                                                        ' solutes at soil surface']};
rnitlit         =           {"State",   0,      "g/l/day",  "numeric",  'nitrification of the litter'};
rnitman         =           {"State",   0,      "g/l/day",  "numeric",  'nitrification of the manure pool'};
ptden           =           {"State",   0,      "g/cm²",    "numeric",  'profile total denitrification'};
pthyd           =           {"State",   0,      "g/cm²",    "numeric",  'profile total hydrolysis'};
ptmin           =           {"State",   zeros(nsol{2},1),...
                                                "g/cm²",    "numeric",  'profile total mineralisation'};
ptnit           =           {"State",   0,      "g/cm²",    "numeric",  'profile total nitrification'};
ptscorg         =           {"State",   0,      "g/cm²",    "numeric",  'cumulative organic carbon sink for the whole profile'};
ptsnorg         =           {"State",   0,      "g/cm²",    "numeric",  'cumulative organic nitrogen sink for the whole profile'};
ptvol           =           {"State",   0,      "g/cm²",    "numeric",  'profile total volatilisation'};
ptup            =           {"State",   zeros(nsol{2},1),...
                                                "g/cm²",    "numeric",  'profile total solute uptake'};
rleasa          =           {"State",   zeros(nsol{2},1),...
                                                "g/cm²",    "numeric",  ['cumulative solute flux at the bottom',...
                                                                        ' of the soil profile']};
UreumBalance_log=           {"Logging",   zeros(6,1),...
                                                "g/cm²",      "numeric", ['Datalogging variable for ureum content in',...
                                                                        ' each soil layer [g/cm²]']};
NH4Balance_log  =           {"Logging",   zeros(6,1),...
                                                "g/cm²",      "numeric", ['Datalogging variable for NH4 content in',...
                                                                        ' each soil layer [g/cm²]']};
NO3Balance_log  =           {"Logging",   zeros(6,1),...
                                                "g/cm²",       "numeric", ['Datalogging variable for nitrate content in',...
                                                                        ' each soil layer [g/cm²]']};                                                                    
UreumSoil_log   =           {"Logging",   zeros(nComp{2},1),...
                                                "g/cm²",      "numeric", ['Datalogging variable for ureum content in',...
                                                                        ' each soil layer [g/cm²]']};
NH4Soil_log     =           {"Logging",   zeros(nComp{2},1),...
                                                "g/cm²",      "numeric", ['Datalogging variable for NH4 content in',...
                                                                        ' each soil layer [g/cm²]']};
NO3Soil_log     =           {"Logging",   zeros(nComp{2},1),...
                                                "g/cm²",       "numeric", ['Datalogging variable for nitrate content in',...
                                                                        ' each soil layer [g/cm²]']};                                                                    
tcsolo          =           {"State",   repmat([0,1,1],...
                                        nComp{2},1).*[repmat(0.767e-05,30,1);...
                                        repmat(0.167e-05,30,1);repmat(0.2e-05,...
                                        25,1)],     "g/cm²", "numeric", ['initial solute concentration in',...
                                                                        ' the soil profile in the outer cilinder']};
tcsink          =           {"State",   zeros(nsol{2},1),...
                                                "g/cm²",    "numeric",  'cumulative sink for each compartment'};
tflcorg         =           {"State",   0,      "g/cm²",    "numeric",  ['cumulative amount of C added',...
                                                                        ' with organic fertilisation']};
tflnorg         =           {"State",   0,      "g/cm²",    "numeric",  ['cumulative amount of N added',...
                                                                        ' with organic fertilisation']};	
tflsol          =           {"State",   zeros(nsol{2},1),   "g/cm²",...
                                                            "numeric",  ['cumulative solute inflow since the',...
                                                                        ' beginning of the simulation']};
time_uptake 	=           {"State",   [],     "g/cm²",    "numeric",  ['time series of the nitrogen uptake',...
                                                                        ' [time, total convective uptake, diffusive uptake,',...
                                                                        ' total uptake, daily cumulative uptake,',...
                                                                        ' total demand, plant demand]']};
tsoli           =           {"State",   zeros(nsol{2},1),   "g/cm²",...
                                                            "numeric",  'initial profile total concentration'};
uptake_matrix 	=           {"State",   zeros(1,6),"g/cm²", "numeric",  ['daily nitrogen uptake',...
                                                                        ' [time, total convective uptake, diffusive uptake,',...
                                                                        ' total uptake, daily cumulative uptake,',...
                                                                        ' total demand]']};
uptakei         =           {"State",   [],     "g/cm²",    "numeric",  ['nitrogen uptake in each soil',...
                                                                        ' compartiment from the immobile',...
                                                                        ' soil region']};
uptakem         =           {"State",   [],     "g/cm²",    "numeric",  ['nitrogen uptake in each soil',...
                                                                        ' compartiment from the mobile',...
                                                                        ' soil region']};	
volati          =           {"State",   [],     "g/cm²",    "numeric",  ['nitrogen volatilisation in each soil',...
                                                                        ' compartiment from the immobile',...
                                                                        ' soil region']};	
volatm          =           {"State",   [],     "g/cm²",    "numeric",  ['nitrogen volatilisation in each soil',...
                                                                        ' compartiment from the immobile',...
                                                                        'soil region']};		

%%%%%%%% WATER TRANSPORT MODULE %%%%%%%%
bot_flux        =           {"State",   [],     "cm/day",   "numeric",  ['water flux at the bottom',...
                                                                        ' of the soil']};                                                                    
bot_inf         =           {"State",   [],     "cm/day",  "numeric",   'instanate bottom flux'};
CAT             =           {"State",   [],     "cm",       "numeric",  ['daily balance of transpiration',...
                                                                        ' [t, cum_transp]']};
cum_bot_flxs    =           {"State",   0,      "cm",       "numeric",  'cumulative bottom water flux'}; 	
cum_evap        =           {"State",   0,     "cm",       "numeric",  'cumulative evaporation'};
cum_infiltr 	=           {"State",   0,     "cm",       "numeric",  'cumulative infiltration of water in the soil'}; 
cum_pot_transp 	=           {"State",   0      "cm",       "numeric",  'cumulative transpiration'};
cum_potential_surface_flux	=...
                            {"State",   0,      "cm",       "numeric",  'cumulative potential water surface flux'};
cum_sink_wat1	=           {"State",   0,      "--",       "numeric",  'cumulative water sink'};   
cum_sink_wat2   =           {"State",   zeros(1,nComp{2}),...
                                                "--",       "numeric",  'cumulative water sink'};
cum_top_flxs	=           {"State",   0,      "cm",       "numeric",  'cumulative water flux at the surface'}; 
cum_trans       =           {"State",   0,      "cm",       "numeric",  'cumulative transpiration'};
CUMUL_EVAP      =           {"State",   [],     "cm",       "numeric",  ['daily balance of evaporation',...
                                                                        ' [t, cum_evap]']};
water_balance   =           {"State",   zeros(5, 1),...
                                                "cm",       "numeric",  ['daily balance of water fluxes',...
                                                                        ' [t,top_flux,bot_flux,cum_trans,sum(wcmo)-stock]']};
evap            =           {"State",   0,      "cm",       "numeric",  ' daily evaporation'};    
extra_water     =           {"State",   [],     "??",       "numeric",  'extra water added during current time step'}; 

first_time_bc 	=           {"State",   1,      "--",       "boolean",  ['boolean to indicate whether it',...
                                                                        ' is the first a boundary condition is used']};
first_time      =           {"State",   1,      "--",       "boolean",  ['boolean to indicate whether it',...
                                                                        ' is the first time the wave model is calculated']};
flxar           =           {"State",   0,      "cm/day",   "numeric",  'water flux ????'};
flxsa           =           {"State",   [],     "cm/day",   "numeric",  'water flux between the nodes'};
flxsah          =           {"State",   [],     "cm/day",   "numeric",  ['water flux between the nodes',...
                                                                        ' halfway the previous and the actual time step']};
flxsbot         =           {"State",   0,      "cm/day",   "numeric",  'water flux at the bottom'};
PressHSoil      =           {"State",   zeros(nComp{2},1),...
                                                "cm",      "numeric",  "soil pressure head at nodes"};
phbot           =           {"State",   0,      "cm",       "numeric",  'pressure head at the soil bottom'};
phsurf          =           {"State",   -10000,"cm",       "numeric",  'pressure head at the soil surface'};
pond_from       =           {"State",   9999,   "cm",       "numeric",  'depth from which the ponding starts'};
pond            =           {"State",   0,      "cm",       "numeric",  'height of the ponding'};
ponded          =           {"State",   0,      "--",       "boolean",  'boolean if there is ponding'};
POT             =           {"State",   [],     "cm",       "numeric",  'daily balance of potential transpiration'};
                                                           
potential_surface_flux	=   {"State",   0,      "cm",       "numeric",  'potential flux at the soil surface'};
potential_transp	=       {"State",   0,      "cm",       "numeric",  'potential transpiration'};
pvela           =           {"State",   [],     "cm/day",   "numeric",  ['actual pore velocity',...
                                                                        ' between the nodes']};
pvelah          =           {"State",   [],     "cm/day",   "numeric",  ['pore velocity between',...
                                                                        ' the nodes halfway the actual',...
                                                                        'and the previous time step']};
pvelo           =           {"State",   [],     "cm/day",   "numeric",  ['optimal pore velocity',...
                                                                        ' between the nodes']};
pveloh 	        =           {"State",   [],     "cm/day",   "numeric",  ['pore velocity between',...
                                                                        ' the nodes halfway the actual',...
                                                                        'and the previous time step']};
runoff          =           {"State",   0,      "cm",       "numeric",  'amount of water that runs off'};	
seep            =           {"State",   0,      "--",       "boolean",  'boolean to indicate seepage'}; 
sink            =           {"State",   [],     "day^-1",   "numeric",  'total root extraction rate'};	 
WatSinkSoil_log           =           {"State",   [],     "day^-1",   "numeric",  ['time series of cumulative actual',...
                                                                        ' transpiration']}; 
top_flux        =           {"State",   [],     "cm",       "numeric",  'cumulative actual surface flux'};	
top_inf         =           {"State",   [],     "cm",       "numeric",  'instatanate top flux'};
tot_upt         =           {"State",   0,      "g/cm²",    "numeric",  'daily cumulative nitrogen uptake'};
trans           =           {"State",	[],     "cm",       "numeric",  'actual transpiration'};
wat_flxs        =           {"State",   [],     "cm/day",   "numeric",  ['soil water fluxes acrosses',...
                                                                        ' the nodes of the soil compartments']};
wat_flxsa       =           {"State",   [],     "cm/day",   "numeric",  ['water flux between the nodes',...
                                                                        ' of each soil compartiment']};  
water_storage 	=           {"State",   [],     "--",       "numeric",  'water storage in th soil'};	
WCSoil_log      =           {"State",   zeros(nComp{2},1),...
                                                "--",       "numeric",  "water content in soil nodes"};
wcio            =           {"State",   [],     "cm/day",   "numeric",  'water content in the immobile region'};
wciob           =           {"State",   [],     "cm/day",   "numeric",  ['water content in the',...
                                                                        ' immobile region at time t-dt']};	
wcma            =           {"State",   [],     "cm/day",   "numeric",  ['water content in the immobile',... 
                                                                        ' region between the nodes']};	 
wcmah           =           {"State",   [],     "cm/day",   "numeric",  ['water content in the immobile region',...
                                                                        ' between the node halfway between the current',...
                                                                        ' and previous time step']};	
wcmo            =           {"State",   [],     "cm/day",   "numeric",  ['water content in the mobile region',...
                                                                        ' at the nodes']};	
wcmob 	        =           {"State",   [],     "cm/day",   "numeric",  ['water content in the mobile region',...
                                                                        ' at the nodes halfway between the current',...
                                                                        ' and the previous timestep']};
wco 	        =           {"State",   [],     "cm/day",   "numeric",  'water content at nodes'};
wcob            =           {"State",   [],     "cm/day",   "numeric",  ['water content at the nodes',...
                                                                        ' halfway between the current',...
                                                                        ' and previous timestep']};	
wcp             =           {"State",   zeros(nComp{2},1),  "--",...
                                                            "numeric",  'previous value of WC'};
%%%%%%%% HEAT TRANSPORT MODULE %%%%%%
TSoil           =           {"Logging",   zeros(nComp{2},1),...
                                                 "°C",       "numeric",  "soil temperature at node"};
temp            =           {"State",   ones(1,nComp{2})*7,...
                                                "°C",       "numeric",  "Initial temperature profile with a temperature of 7 degrees"};
temptopp        =           {"State",   0,      "°C",       "numeric",...
                                                                        "Initial temperature at the surface"};

%%%%%%%% NUMERICAL COMPUTATION PARAMETERS %%%%%%%%
bcbot_changed 	=           {"State",   0,      "--",       "numeric",  ['indicator to show if',...
                                                                        ' bottom boundary condition is changed',...
                                                                        ' for the water flux']};
bctop_changed	=           {"State",   0,      "--",       "numeric",  ['indicator to show if',...
                                                                        ' top boundary condition is changed',...
                                                                        ' for the water flux']};
boco_bot_type	=           {"State",   0,      "--",       "numeric",  ['indicator to choose the',...
                                                                        ' type of boundary condition',...
                                                                        ' at the bottom of the soil for the water flux']};
boco_bot	    =           {"State",   0,      "--",       "numeric",  ['bottom boundary condition',...
                                                                        ' for the water flux']};
boco_top_type	=           {"State",   0,      "--",       "numeric",  ['indicator to choose the',...
                                                                        ' type of boundary condition',...
                                                                        ' at the surface of the soil for the water flux']};
boco_top	    =           {"State",   0,      "--",       "numeric",  ['surface boundary condition',...
                                                                        ' for the water flux']};	 
dt_changed_bc	=           {"State",   0,      "day"       "numeric",  'change of time step in numerical solution'};
dt_sol_count	=           {"State",   0,      "day",      "numeric",  ['change of time step in numerical',...
                                                                        ' solution of solute module']};
dt              =           {"State",   0,      "day",      "numeric",  ['time step for numerical solution of differentail eq.'...
                                                                        ' in this cilinder']};
initsol         =           {"State",   0,      "--",       "numeric",  'integer to initialize the soil conditions'};       	
iter            =           {"State",   0,      "--",       "numeric",  ['number of iterations used',...
                                                                        ' calculate the new values of',...
                                                                        ' the pressure head for on time step']};
next_dt_new_bc	=           {"State",   0,      "--",       "boolean",  ['boolean to indicate whether',...
                                                                        ' a new time step is calculated']};
numboolean      =           {"State",   0,      "--",       "numeric",  'boolean indicator if the wave module has reached convergence'};  
JulianDay       =           {"State",   [],     "JDAY",     "numeric",  ['time series of all moments',...
                                                                        ' of calculating the wave model']};	

% convert all variables to table and save in soilStateParams.xml
vars = whos;
vars = string({vars.name}');
idx_savePath = strcmp(vars,'savePath');
idx_nComp = strcmp(vars,'nComp');
idx_nSol =  strcmp(vars,'nsol');
idx_tstart = strcmp(vars,'tstart');
vars = vars(~(idx_savePath|idx_nComp|idx_nSol|idx_tstart),:);
nVars = length(vars);


expression = strcat("soilInnerStateParams = vertcat(");
for iVars=1:nVars
    if iVars~=nVars
        expression = strcat(expression,vars(iVars),',');
    else
        expression = strcat(expression,vars(iVars),');');
    end
end
eval(expression);
% string array should be converted to cell before merging cells
vars = cellstr(vars);
soilInnerStateParams = horzcat(vars,soilInnerStateParams);
params2xml(soilInnerStateParams,[savePath,'soilInnerStateParams']);
%% Soil State parameters unrooted zone
% All state parameters for the outer cilinder of the
% quasi-2D approach to the wave soil simulation model. Inner cilinder is
% the cilinder in which plant roots are present. Outer cilinder is rootless
% soil 
clearvars -except savePath nComp nsol tstart
% state all parameters alphabetically {type, value, unit, data type,
% comment}

%%%%%%%% SOLUTE PARAMETERS %%%%%%%%
acsolio         =           {"State",   [],     "g/kg",     "numeric",  ['absorbed solute',...
                                                                        ' concentration in the immobile',...
                                                                        ' zone for the acutal time',...
                                                                        ' step for each compartment',...
                                                                        ' and each solute species']};
acsolmo         =           {"State",   [],     "g/kg",     "numeric",  ['absorbed solute concentration',...
                                                                        ' in the mobile zone for the actual',...
                                                                        ' time step for each compartiment and',...
                                                                        ' each solute species']}; 
applic_boolean 	=           {"State",   0,      "--",       "boolean",  "?????"};
bc              =           {"State",   zeros(1,10),...
                                                "--",       "numeric",  "?????"};
carblit         =           {"State",   0,      "g/cm²",    "numeric",  'carbon in litter pool'};
carbman         =           {"State",   0,      "g/cm²",    "numeric",  'carbon in manure pool'};
%case_breaking1	=           {"State",   0,      "--",       "boolean",  '???'}; UNUSED PARAMETER
cco2o           =           {"State",   0,      "g",        "numeric",  'concentration co2 released'};       
cden            =           {"State",   zeros(nComp{2}-1,1),"g/cm²",...
                                                            "numeric",  'cumulative denitrification in each soil layer'};
chyd            =           {"State",   zeros(nComp{2}-1,1),"g/cm²",...
                                                            "numeric",  'cumulative hydrolysis in each soil layer'};
cim             =           {"State",   []      "g/cm²",    "numeric",  'solute immobile concentration'};
cm              =           {"State",   [],     "g/cm²",    "numeric",  'solute mobile concentration'};
UreumConc_log   =           {"Logging",   zeros(nComp{2},1),...
                                                "g/cm²",      "numeric", ['Datalogging variable for ureum content in',...
                                                                        ' each soil layer [g/cm²]']};
NH4Conc_log     =           {"Logging",   zeros(nComp{2},1),...
                                                "g/cm²",      "numeric", ['Datalogging variable for NH4 content in',...
                                                                        ' each soil layer [g/cm²]']};
NO3Conc_log     =           {"Logging",   zeros(nComp{2},1),...
                                                "g/cm²",       "numeric", ['Datalogging variable for nitrate content in',...
                                                                        ' each soil layer [g/cm²]']};                                                                    
cmin            =           {"State",   zeros(nComp{2},nsol{2}),"g/cm²",...
                                                            "numeric",  ['cumulative mineralisation of nitrogen',...
                                        ' in each soil layer']};
cnit            =           {"State",   zeros(nComp{2}-1,1),"g/cm²",...
                                                            "numeric",  'cumulative nitrification in each soil layer'};
conirsol        =           {"State",   [zeros(1,nsol{2}+1);...
                                         [65+tstart{2},zeros(1,nsol{2})]],...
                                                "g/cm²",    "numeric",  'fertigation concentrations [t ureum ammonium nitrate]'};
csol            =           {"State",   [],     "g/cm²",    "numeric",  'total solute concetentration'};
csolmo          =           {"State",   [],     "g/kg",     "numeric",  ['solute concentration in the mobile zone',...
                                                                        ' for the actual time step for',...
                                                                        ' each compartiment and each solute species']};
cs              =           {"State",   zeros(3,1),...
                                                "g/cm²",    "numeric",  "initial solute reservoir zeros(nsol,1)"}; 
cum_nit_sink	=           {"State",   [],     "g/cm²",    "numeric",  'cumulative nitrogen sink'};
cupt            =           {"State",   zeros(nComp{2},nsol{2}),...
                                                "g/cm²",    "numeric",  'profile total carbon utpake'};
cvol            =           {"State",   zeros(nComp{2}-1,1),...
                                                "g/cm²",    "numeric",  'cumulative volatilisation in each soil layer'};
deccorg         =           {"State",   0,      "g/cm²",    "numeric",  'organic carbon sink for each compartiment'};
decnorg         =           {"State",   0,      "g/cm²",    "numeric",  'organic nitrogen sink for each compartiment'};
deniti          =           {"State",   [],     "g/cm²",    "numeric",  ['denitrification in each compartiment',...
                                                                        ' for immobile region']};
denitm          =           {"State",   [],     "g/cm²",    "numeric",  ['denitrificationo in each compartiment',...
                                                                        ' for the mobile region']};
diffus          =           {"State",   [],     "g/(L*day)","numeric",  ['effective diffusion coefficient',...
                                                                        ' corrected for numerical dispersion']};
DN              =           {"State",   [],     "g/cm²",    "numeric",  'daily soil denitrification in soil mobile region'};             
extra_sol       =           {"State",   [],     "g/cm²",    "numeric",  'extra solutes added during current time step'};
fsol            =           {"State",   [tstart{2}, zeros(1,nsol{2})],...
                                                "g/cm²",    "numeric",  'fertilizer application [t ureum ammonium nitrate]'};
hydro_ureai 	=           {"State",   [],     "g/cm²",    "numeric",  'ureum hydrolysis in the immobile region'}; 
hydro_uream 	=           {"State",   [],     "g/cm²",    "numeric",  'ureum hydrolysis in the immobile region'};
mineri          =           {"State",   [],     "g/l/day",  "numeric", ['mineralisation of organic',...
                                                                        ' nitrogen in the immmobile soil region',...
                                                                        ' for each compartiment']};
minerm          =           {"State",   [],     "g/l/day",  "numeric", ['mineralisation of organic',...
                                                                        ' nitrogen in the mobile soil region',...
                                                                        ' for each compartiment']};	 
N_reaction_balance	=       {"State",   zeros(11,1),...
                                                "--",      "numeric",  ['Reaction balances from all',...
                                                                        ' nitrogen sources']};
N               =           {"State",   [],     "g/cm²",    "numeric",  'daily soil nitrification in soil mobile region'};% DN2
nitrifi         =           {"State",   [],     "g/l/day",  "numeric",  ['nitrification in each compartiment',...
                                                                        ' in the immobile soi region']};
nitrifm         =           {"State",   [],     "g/l/day",  "numeric",  ['nitrification in each compartiment',...
                                                                        ' in the mobile soil region']};		 
om_appl         =           {"Input",   [400e-05,...
                                        40e-05],    "g/cm²","numeric", "amount of organic matter applied at harvest date in the outer cilinder of quasi 2D WAVE"};
om_balance      =           {"State",   [],     "g/cm²",    "numeric",  'organic matter contents in each OM pool'};
CarbMan_log     =           {"Logging", zeros(nComp{2},1),...
                                                "g/cm²",    "numeric",  'Carbon in manure content'};
NitMan_log      =           {"Logging", zeros(nComp{2},1),...
                                                "g/cm²",    "numeric",  'Nitrogen in manure content'};
CarbLit_log     =           {"Logging", zeros(nComp{2},1),...
                                                "g/cm²",    "numeric",  'Carbon in litter content'};
NitLit_log      =           {"Logging", zeros(nComp{2},1),...
                                                "g/cm²",    "numeric",  'Nitrogen in litter content'};
CarbHum_log     =           {"Logging", zeros(nComp{2},1),...
                                                "g/cm²",    "numeric",  'Carbon in hummus content'};
NitHum_log      =           {"Logging", zeros(nComp{2},1),...
                                                "g/cm²",    "numeric",  'Nitrogen in hummus content'};
CO2vol_log      =           {"Logging", zeros(nComp{2},1),...
                                                "g/cm²",    "numeric",  'Volatised CO2 from soil'};
reservoir       =           {"State",   0,      "g/cm²",    "numeric",  ['fictous reservoir of inorganic',...
                                                                        ' solutes at soil surface']};
rnitlit         =           {"State",   0,      "g/l/day",  "numeric",  'nitrification of the litter'};
rnitman         =           {"State",   0,      "g/l/day",  "numeric",  'nitrification of the manure pool'};
ptden           =           {"State",   0,                  "g/cm²",...
                                                            "numeric",  'profile total denitrification'};
pthyd           =           {"State",   0,                  "g/cm²",...
                                                            "numeric",  'profile total hydrolysis'};
ptmin           =           {"State",   zeros(nsol{2},1),   "g/cm²",...
                                                            "numeric",  'profile total mineralisation'};
ptnit           =           {"State",   0,                  "g/cm²",...
                                                            "numeric",  'profile total nitrification'};
ptscorg         =           {"State",   0,                  "g/cm²",...
                                                            "numeric",  'cumulative organic carbon sink for the whole profile'};
ptsnorg         =           {"State",   0,                  "g/cm²",...
                                                            "numeric",  'cumulative organic nitrogen sink for the whole profile'};
ptvol           =           {"State",   0,                  "g/cm²",...
                                                            "numeric",  'profile total volatilisation'};
ptup            =           {"State",   zeros(nsol{2},1),   "g/cm²",...
                                                            "numeric",  'profile total solute uptake'};
rleasa          =           {"State",   zeros(nsol{2},1),   "g/cm²",...
                                                            "numeric",  ['cumulative solute flux at the bottom',...
                                                                        ' of the soil profile']};
UreumBalance_log=           {"Logging",   zeros(6,1),...
                                                "g/cm²",      "numeric", ['Datalogging variable for ureum content in',...
                                                                        ' each soil layer [g/cm²]']};
NH4Balance_log  =           {"Logging",   zeros(6,1),...
                                                "g/cm²",      "numeric", ['Datalogging variable for NH4 content in',...
                                                                        ' each soil layer [g/cm²]']};
NO3Balance_log  =           {"Logging",   zeros(6,1),...
                                                "g/cm²",       "numeric", ['Datalogging variable for nitrate content in',...
                                                                        ' each soil layer [g/cm²]']};                                                                    
UreumSoil_log   =           {"Logging",   zeros(nComp{2},1),...
                                                "g/cm²",      "numeric", ['Datalogging variable for ureum content in',...
                                                                        ' each soil layer [g/cm²]']};
NH4Soil_log     =           {"Logging",   zeros(nComp{2},1),...
                                                "g/cm²",      "numeric", ['Datalogging variable for NH4 content in',...
                                                                        ' each soil layer [g/cm²]']};
NO3Soil_log     =           {"Logging",   zeros(nComp{2},1),...
                                                "g/cm²",       "numeric", ['Datalogging variable for nitrate content in',...
                                                                        ' each soil layer [g/cm²]']};                                                                    
tcsink          =           {"State",   zeros(nsol{2},1),   "g/cm²",...
                                                            "numeric",  'cumulative sink for each compartment'};
tcsolo          =           {"State",   repmat([0,1,1],...
                                        nComp{2},1).*[repmat(0.767e-05,30,1);...
                                        repmat(0.167e-05,30,1);repmat(0.2e-05,...
                                        25,1)],     "g/cm²", "numeric", ['initial solute concentration in',...
                                                                        ' the soil profile in the outer cilinder']};
tflcorg         =           {"State",   0,      "g/cm²",    "numeric",  ['cumulative amount of C added',...
                                                                        ' with organic fertilisation']};
tflnorg         =           {"State",   0,      "g/cm²",    "numeric",  ['cumulative amount of N added',...
                                                                        ' with organic fertilisation']};	
tflsol          =           {"State",   zeros(nsol{2},1),   "g/cm²",...
                                                            "numeric",  ['cumulative solute inflow since the',...
                                                                        ' beginning of the simulation']};
time_uptake 	=           {"State",   [],     "g/cm²",    "numeric",  ['time series of the nitrogen uptake',...
                                                                        ' [time, total convective uptake, diffusive uptake,',...
                                                                        ' total uptake, daily cumulative uptake,',...
                                                                        ' total demand, plant demand]']};
tsoli           =           {"State",   zeros(nsol{2},1),   "g/cm²",...
                                                            "numeric",  'initial profile total concentration'};
uptake_matrix	=           {"State",   zeros(1,6),"g/cm²", "numeric",  ['daily nitrogen uptake',...
                                                                        ' [time, total convective uptake, diffusive uptake,',...
                                                                        ' total uptake, daily cumulative uptake,',...
                                                                        ' total demand]']};
uptakei         =           {"State",   [],     "g/cm²",    "numeric",  ['nitrogen uptake in each soil',...
                                                                        ' compartiment from the immobile',...
                                                                        ' soil region']};
uptakem         =           {"State",   [],     "g/cm²",    "numeric",  ['nitrogen uptake in each soil',...
                                                                        ' compartiment from the mobile',...
                                                                        ' soil region']};	
volati          =           {"State",   [],     "g/cm²",    "numeric",  ['nitrogen volatilisation in each soil',...
                                                                        ' compartiment from the immobile',...
                                                                        ' soil region']};	
volatm          =           {"State",   [],     "g/cm²",    "numeric",  ['nitrogen volatilisation in each soil',...
                                                                        ' compartiment from the immobile',...
                                                                        'soil region']};		

%%%%%%%% WATER TRANSPORT MODULE %%%%%%%%
bot_flux        =           {"State",   [],     "cm/day",   "numeric",  ['water flux at the bottom',...
                                                                        ' of the soil']};                                                                    
bot_inf         =           {"State",   [],     "cm/day",   "numeric",  'instanate bottom flux'};
bot_inf_new     =           {"State",   [],     "cm/day",   "numeric",  'value of the bottom flux after the simulation of the soil processes'};  
CAT             =           {"State",   [],     "cm",       "numeric",  ['daily balance of transpiration',...
                                                                        ' [t, cum_transp]']};
cum_bot_flxs    =           {"State",   0,      "cm",       "numeric",  'cumulative bottom water flux'}; 	
cum_evap        =           {"State",   0,      "cm",       "numeric",  'cumulative evaporation'};
cum_infiltr 	=           {"State",   0,      "cm",       "numeric",  'cumulative infiltration of water in the soil'}; 
cum_pot_transp	=           {"State",   0,      "cm",       "numeric",  'cumulative transpiration'};
cum_potential_surface_flux	=...
                            {"State",   0,      "cm",       "numeric",  'cumulative potential water surface flux'};
cum_sink_wat1	=           {"State",   0,      "--",       "numeric",  'cumulative water sink'};   
cum_sink_wat2   =           {"State",   zeros(1,nComp{2},1),"--",...
                                                            "numeric",  'cumulative water sink'};
cum_top_flxs	=           {"State",   0,      "cm",       "numeric",  'cumulative water flux at the surface'}; 
cum_trans       =           {"State",   0,      "cm",       "numeric",  'cumulative transpiration'};
CUMUL_EVAP      =           {"State",   [],     "cm",       "numeric",  ['daily balance of evaporation',...
                                                                        ' [t, cum_evap]']};
water_balance   =           {"State",   zeros(5, 1),...
                                                "cm",       "numeric",  ['daily balance of water fluxes',...
                                                                        ' [t,top_flux,bot_flux,cum_trans,sum(wcmo)-stock]']};
evap            =           {"State",   0,      "cm",       "numeric",  ' daily evaporation'};    
extra_water     =           {"State",   [],     "--",       "numeric",  'extra water added during current time step'}; 

first_time_bc 	=           {"State",   1,      "--",       "boolean",  ['boolean to indicate whether it',...
                                                                        ' is the first a boundary condition is used']};
first_time      =           {"State",   1,      "--",       "boolean",  ['boolean to indicate whether it',...
                                                                        ' is the first time the wave model is calculated']};
flxar           =           {"State",   0,      "cm/day",   "numeric",  'water flux ????'};
flxsa           =           {"State",   [],     "cm/day",   "numeric",  'water flux between the nodes'};
flxsah          =           {"State",   [],     "cm/day",   "numeric",  ['water flux between the nodes',...
                                                                        ' halfway the previous and the actual time step']};
flxsbot         =           {"State",   0,      "cm/day",   "numeric",  'water flux at the bottom'};
PressHSoil      =           {"State",   zeros(nComp{2},1),...
                                                "cm",       "numeric",...
                                        "soil pressure head at nodes"};
phbot           =           {"State",   0,      "cm",       "numeric",  'pressure head at the soil bottom'};
phsurf          =           {"State",   -10000, "cm",       "numeric",  'pressure head at the soil surface'};
pond_from       =           {"State",   9999,   "cm",       "numeric",  'depth from which the ponding starts'};
pond            =           {"State",   0,      "cm",       "numeric",  'height of the ponding'};
ponded          =           {"State",   0,      "--",       "boolean",  'boolean if there is ponding'};
POT             =           {"State",   [],     "cm",       "numeric",  'daily balance of potential transpiration'};
                                                           
potential_surface_flux	=   {"State",   0,      "cm",       "numeric",  'potential flux at the soil surface'};
potential_transp	=       {"State",   0,      "cm",       "numeric",  'potential transpiration'};
pvela           =           {"State",   [],     "cm/day",   "numeric",  ['actual pore velocity',...
                                                                        ' between the nodes']};
pvelah          =           {"State",   [],     "cm/day",   "numeric",  ['pore velocity between',...
                                                                        ' the nodes halfway the actual',...
                                                                        'and the previous time step']};
pvelo           =           {"State",   [],     "cm/day",   "numeric",  ['optimal pore velocity',...
                                                                        ' between the nodes']};
pveloh	        =           {"State",   [],     "cm/day",   "numeric",  ['pore velocity between',...
                                                                        ' the nodes halfway the actual',...
                                                                        'and the previous time step']};
runoff          =           {"State",   0,      "cm",       "numeric",  'amount of water that runs off'};	
seep            =           {"State",   0,      "--",       "boolean",  'boolean to indicate seepage'}; 
sink            =           {"State",   [],     "day^-1",   "numeric",  'total root extraction rate'};	 
WatSinkSoil_log =           {"State",   [],     "day^-1",   "numeric",  ['time series of cumulative actual',...
                                                                        ' transpiration']}; 
top_flux        =           {"State",   [],     "cm",       "numeric",  'cumulative actual surface flux'};	
top_inf         =           {"State",   [],     "cm",       "numeric",  'instatanate top flux'};
tot_upt         =           {"State",   0,      "g/cm²",    "numeric",  'daily cumulative nitrogen uptake'};
trans           =           {"State",	[],     "cm",       "numeric",  'actual transpiration'};
wat_flxs        =           {"State",   [],     "cm/day",   "numeric",  ['soil water fluxes acrosses',...
                                                                        ' the nodes of the soil compartments']};
wat_flxsa       =           {"State",   [],     "cm/day",   "numeric",  ['water flux between the nodes',...
                                                                        ' of each soil compartiment']};  
water_storage	=           {"State",   [],     "--",       "numeric",  'water storage in th soil'};	
WCSoil_log      =           {"logging", zeros(nComp{2},1),...
                                                "--",       "numeric",  "water content in soil nodes"};
wcio            =           {"State",   [],     "cm/day",   "numeric",  'water content in the immobile region'};
wciob           =           {"State",   [],     "cm/day",   "numeric",  ['water content in the',...
                                                                        ' immobile region at time t-dt']};	
wcma            =           {"State",   [],     "cm/day",   "numeric",  ['water content in the immobile',... 
                                                                        ' region between the nodes']};	 
wcmah           =           {"State",   [],     "cm/day",   "numeric",  ['water content in the immobile region',...
                                                                        ' between the node halfway between the current',...
                                                                        ' and previous time step']};	
wcmo            =           {"State",   [],     "cm/day",   "numeric",  ['water content in the mobile region',...
                                                                        ' at the nodes']};	
wcmob	        =           {"State",   [],     "cm/day",   "numeric",  ['water content in the mobile region',...
                                                                        ' at the nodes halfway between the current',...
                                                                        ' and the previous timestep']};
wco 	        =           {"State",   [],     "cm/day",   "numeric",  'water content at nodes'};
wcob            =           {"State",   [],     "cm/day",   "numeric",  ['water content at the nodes',...
                                                                        ' halfway between the current',...
                                                                        ' and previous timestep']};	
wcp             =           {"State",   zeros(nComp{2},1),  "--",...
                                                            "numeric",  'previous value of WC'};
%%%%%%%% HEAT TRANSPORT MODULE %%%%%%
TSoil           =           {"State",   zeros(nComp{2},1),...
                                                "°C",       "numeric",  "soil temperature at node"};
temp            =           {"State",   ones(1,nComp{2})*7,...
                                                "°C",       "numeric",  "Initial temperature profile with a temperature of 7 degrees"};
temptopp        =           {"State",   0,      "°C",       "numeric",  "Initial temperature at the surface"};

%%%%%%%% NUMERICAL COMPUTATION PARAMETERS %%%%%%%%
bcbot_changed	=           {"State",   0,      "--",       "numeric",  ['indicator to show if',...
                                                                        ' bottom boundary condition is changed',...
                                                                        ' for the water flux']};
bctop_changed	=           {"State",   0,      "--",       "numeric",  ['indicator to show if',...
                                                                        ' top boundary condition is changed',...
                                                                        ' for the water flux']};
boco_bot_type	=           {"State",   0,      "--",       "numeric",  ['indicator to choose the',...
                                                                        ' type of boundary condition',...
                                                                        ' at the bottom of the soil for the water flux']};
boco_bot	    =           {"State",   0,      "--",       "numeric",  ['bottom boundary condition',...
                                                                        ' for the water flux']};
boco_top_type	=           {"State",   0,      "--",       "numeric",  ['indicator to choose the',...
                                                                        ' type of boundary condition',...
                                                                        ' at the surface of the soil for the water flux']};
boco_top	    =           {"State",   0,      "--",       "numeric",  ['surface boundary condition',...
                                                                        ' for the water flux']};	 
dt              =           {"State",   0,      "day",      "numeric",  ['time step for numerical solution of differentail eq.'...
                                                                        ' in this cilinder']};
dt_changed_bc	=           {"State",   0,      "day"       "numeric",  'change of time step in numerical solution'};
dt_sol_count	=           {"State",   0,      "day",      "numeric",  ['change of time step in numerical',...
                                                                        ' solution of solute module']};
%front1         =           {"State",   [],     "??",       "???",      '????'}; unused parameter	
initsol         =           {"State",   0,      "--",       "numeric",  'integer to initialize the soil conditions'};       	
iter            =           {"State",   0,      "--",       "numeric",  ['number of iterations used',...
                                                                        ' calculate the new values of',...
                                                                        ' the pressure head for on time step']};
next_dt_new_bc	=           {"State",   0,      "--",       "boolean",  ['boolean to indicate whether',...
                                                                        ' a new time step is calculated']};
numboolean      =           {"State",   0,      "--",       "numeric",  '????'};  
JulianDay       =           {"State",   [],     "JDAY",     "numeric",  ['time series of all moments',...
                                                                        ' of calculating the wave model']};	
 % convert all variables to table and save in soilStateParams.xml
vars = whos;
vars = string({vars.name}');
idx_savePath = strcmp(vars,'savePath');
idx_nComp = strcmp(vars,'nComp');
idx_nSol =  strcmp(vars,'nsol');
idx_tstart = strcmp(vars,'tstart');
vars = vars(~(idx_savePath|idx_nComp|idx_nSol|idx_tstart),:);
nVars = length(vars);

expression = strcat("soilOuterStateParams = vertcat(");
for iVars=1:nVars
    if iVars~=nVars
        expression = strcat(expression,vars(iVars),',');
    else
        expression = strcat(expression,vars(iVars),');');
    end
end
eval(expression);
% string array should be converted to cell before merging cells
vars = cellstr(vars);
soilOuterStateParams = horzcat(vars,soilOuterStateParams);
params2xml(soilOuterStateParams,[savePath,'soilOuterStateParams']);
%% Soil State parameter common variables
% All state parameters for the outer cilinder of the
% quasi-2D approach to the wave soil simulation model. Inner cilinder is
% the cilinder in which plant roots are present. Outer cilinder is rootless
% soil 
clearvars -except savePath nComp nsol
% state all parameters alphabetically {type, value, unit, data type,
% comment}
bottomBC        =           {"State",   [4 0],  "--",       "numeric",  ['integer indicator for for',...
                                                                        ' choosing the type of boundary condition']};       
daily_mineral   =           {"State",   [],     "g/cm²",    "numeric",  'daily mineralisation of organic nitrogen'};


N_reaction_balance	=       {"State",   zeros(11,1),...
                                                "--",       "numeric",  ['Reaction balances from all',...
                                                                        ' nitrogen sources']};
NSupply         =           {"State",   0,      "g/plant",  "numeric",  "soil N supply to the plant roots"};
                                        
Nuptake_time    =           {"State",   [],     "g/cm²",    "numeric",  'daily soil solute availability for plant uptake'};

soil_om         =           {"Input",   ones(nComp{2},7).*...
                                        repmat([1e-07,1.25e-08,1e-07,...
                                        1.25e-08,1e-03,1.25e-04,0],...
                                        nComp{2},1),...
                                                "g/cm²",    "numeric",  ['soil organic matter in inner cilinder',...
                                                                        '[Carbon in manure, nitrogen in manure,',...
                                                                        'carbon in litter, nitrogen in litter,',...
                                                                        'carbon in hummus, nitrogen in hummus']};
TSoil           =           {"State",   zeros(nComp{2},1),...
                                                "°C",       "numeric",  'soil temperature in every node of spatial discritization'};
UreumSoil_log   =           {"Logging",   zeros(nComp{2},1),...
                                                "g/cm²",      "numeric", ['Datalogging variable for ureum content in',...
                                                                        ' each soil layer [g/cm²]']};
UreumBalance_log=           {"Logging",   zeros(6,1),...
                                                "g/cm²",      "numeric", ['Datalogging variable for ureum content in',...
                                                                        ' each soil layer [g/cm²]']};
NH4Balance_log  =           {"Logging",   zeros(6,1),...
                                                "g/cm²",      "numeric", ['Datalogging variable for NH4 content in',...
                                                                        ' each soil layer [g/cm²]']};
NO3Balance_log  =           {"Logging",   zeros(6,1),...
                                                "g/cm²",       "numeric", ['Datalogging variable for nitrate content in',...
                                                                        ' each soil layer [g/cm²]']};                                                                    
NH4Soil_log     =           {"Logging",   zeros(nComp{2},1),...
                                                "g/cm²",      "numeric", ['Datalogging variable for NH4 content in',...
                                                                        ' each soil layer [g/cm²]']};
NO3Soil_log     =           {"Logging",   zeros(nComp{2},1),...
                                                "g/cm²",       "numeric", ['Datalogging variable for nitrate content in',...
                                                                        ' each soil layer [g/cm²]']};                                                                    
unc_time        =           {"State",   [],		"g/cm²",    "numeric",     "convective nitrogen uptake"};
und_time        =           {"State",   [],     "g/cm²",    "numeric",     "diffusive nitrogen uptake"};
water_balance   =           {"Logging", zeros(4, 1),     "cm",       "numeric",     "cumulative water fluxes [day, top_flux, bot_flux, cum_tranp]"};
WCSoil_log      =           {"Logging", zeros(nComp{2},1),...
                                                "--",       "numeric",  'daily water content in each soil layer'};
JulianDay 		= 			{"Logging",	[], 	"Jday", 	"numeric", 	'Julian time of simulation'};

%check_fractions UNUSED PARAMETER
% convert all variables to table and save in soilStateParams.xml
vars = whos;
vars = string({vars.name}');
idx_savePath = strcmp(vars,'savePath');
idx_nComp = strcmp(vars,'nComp');
idx_nSol =  strcmp(vars,'nsol');
vars = vars(~(idx_savePath|idx_nComp|idx_nSol),:);
nVars = length(vars);

expression = strcat("soilCommonStateParams = vertcat(");
for iVars=1:nVars
    if iVars~=nVars
        expression = strcat(expression,vars(iVars),',');
    else
        expression = strcat(expression,vars(iVars),');');
    end
end
eval(expression);
% string array should be converted to cell before merging cells
vars = cellstr(vars);
soilCommonStateParams = horzcat(vars,soilCommonStateParams);
params2xml(soilCommonStateParams,[savePath,'soilCommonStateParams']);

clearvars